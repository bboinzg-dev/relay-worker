diff --git a/src/utils/variant-normalize.js b/src/utils/variant-normalize.js
index a0120cbfc534b14e47c52a10a7f0aacf3689a4e2..ea8359820142729ad08c9df24afe62ef76c22fd0 100644
--- a/src/utils/variant-normalize.js
+++ b/src/utils/variant-normalize.js
@@ -14,66 +14,72 @@ const CANON = {
 };
 
 /**
  * @param {Record<string, unknown>} [domains]
  * @param {string[]} [allowedKeys]
  */
 function normalizeVariantDomains(domains = {}, allowedKeys = []) {
   const allow = new Set(
     (Array.isArray(allowedKeys) ? allowedKeys : [])
       .map((s) => String(s).toLowerCase())
       .filter(Boolean),
   );
   const out = {};
   for (const [rawKey, rawValue] of Object.entries(domains || {})) {
     const key = String(rawKey || '').trim();
     if (!key) continue;
     const lower = key.toLowerCase();
     const base = CANON[lower] || (lower.includes('coil_voltage') ? 'coil_voltage_vdc' : lower);
     if (allow.size && !allow.has(base)) continue;
     const values = Array.isArray(rawValue) ? rawValue.slice() : [rawValue];
     out[base] = values;
   }
   if (out.coil_voltage_vdc) {
     const flat = new Set();
     for (const val of out.coil_voltage_vdc) {
-      const base = String(val ?? '').trim().toUpperCase();
+      const rawLike =
+        val && typeof val === 'object' && 'raw' in val ? val.raw : val;
+      const base = String(rawLike ?? '').trim().toUpperCase();
       if (base) {
         flat.add(base);
       }
       const decoded = decodeCoilVoltageVdcKeepBoth(val);
       if (decoded && typeof decoded === 'object' && decoded.vdc) {
         const vdc = String(decoded.vdc ?? '').trim();
         if (vdc) {
           flat.add(vdc);
         }
       }
     }
     out.coil_voltage_vdc = Array.from(flat);
   }
   return out;
 }
 
 function decodeCoilVoltageVdcKeepBoth(value) {
-  const raw = String(value ?? '').toUpperCase().trim();
+  const rawSource =
+    value && typeof value === 'object' && 'raw' in value ? value.raw : value;
+  const raw = String(rawSource ?? '').toUpperCase().trim();
   if (!raw) return raw;
   const match = raw.match(/^(\d{2,3}|[14]H)$/);
   if (!match) return raw;
   const token = match[1];
   let val = token;
   if (token === '1H') {
     val = 1.5;
   } else if (token === '4H') {
     val = 4.5;
   } else if (/^\d{2,3}$/.test(token)) {
     const num = Number(token);
     if (Number.isFinite(num)) {
       val = num >= 100 ? (num % 10 === 0 ? num / 10 : num) : num;
     }
   }
-  return { raw, vdc: String(val) };
+  const vdcSource =
+    value && typeof value === 'object' && 'vdc' in value ? value.vdc : val;
+  return { raw, vdc: String(vdcSource ?? '') };
 }
 
 module.exports = {
   normalizeVariantDomains,
   decodeCoilVoltageVdcKeepBoth,
 };