diff --git a/server.js b/server.js
index 0f37845c969d0f7bce524d84c999225ff8f76313..c3b18f039e967aa489f8a2b3355aa4af96e42b35 100644
--- a/server.js
+++ b/server.js
@@ -733,50 +733,63 @@ app.post('/ingest/bulk', requireSession, async (req, res) => {
   } catch (e) { console.error(e); res.status(500).json({ ok:false, error:'bulk ingest failed', detail:String(e?.message || e) }); }
 });
 
 app.post('/ingest/auto', requireSession, async (req, res) => {
   try {
     const { gcsUri, gcsPdfUri, gcs_uri, gcs_pdf_uri, brand, code, series, display_name, family_slug } = req.body || {};
     const uri = gcsUri || gcsPdfUri || gcs_uri || gcs_pdf_uri;
     if (!uri) return res.status(400).json({ ok:false, error:'gcsUri required' });
     const overrides = {
       brand: brand || null,
       series: series || null,
     };
     const result = await getIngest().runAutoIngest({
       gcsUri: uri,
       family_slug,
       brand,
       code,
       series,
       display_name,
       overrides,
     });
     res.json(result);
   } catch (e) { console.error(e); res.status(400).json({ ok:false, error:String(e?.message || e) }); }
 });
 
+app.post('/api/worker/ingest', async (req, res) => {
+  try {
+    const payload = (req?.body && typeof req.body === 'object' && 'payload' in req.body)
+      ? (req.body.payload || {})
+      : (req.body || {});
+    const result = await getIngest().runAutoIngest(payload || {});
+    return res.status(202).json({ ok: true, run: result?.runId || null });
+  } catch (e) {
+    console.error('[api/worker/ingest] failed:', e);
+    return res.status(500).json({ ok: false, error: String(e?.message || e) });
+  }
+});
+
 function pickFirstString(...values) {
   for (const value of values) {
     if (typeof value === 'string' && value.trim()) {
       return value.trim();
     }
   }
   return null;
 }
 
 function getTaskContext(req, phase) {
   const headerName = req.get('X-CloudTasks-TaskName') || req.get('X-Cloud-Tasks-TaskName') || null;
   const retryHeader = req.get('X-CloudTasks-TaskRetryCount') || req.get('X-Cloud-Tasks-TaskRetryCount');
   const parsedRetry = Number(retryHeader);
   return {
     taskName: headerName || `phase:${phase}`,
     retryCount: Number.isFinite(parsedRetry) ? parsedRetry : 0,
   };
 }
 
 const ingestJobMeta = { inspectedAt: 0, columns: null };
 
 async function getIngestJobColumns() {
   const now = Date.now();
   if (ingestJobMeta.inspectedAt && now - ingestJobMeta.inspectedAt < 60_000) {
     return ingestJobMeta.columns;
