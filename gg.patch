diff --git a/src/utils/schema.js b/src/utils/schema.js
index 6ae006717c568a642d093ed9d339eded85e64da3..055f7145139a0b37a2980c521cbbd0a5d2ed9a08 100644
--- a/src/utils/schema.js
+++ b/src/utils/schema.js
@@ -151,55 +151,51 @@ async function ensureSpecsTable(tableName, fields = {}) {
     { name: 'pn', type: 'text' },
     { name: 'series', type: 'text' },
     { name: 'series_code', type: 'text' },
     { name: 'datasheet_uri', type: 'text' },
     { name: 'datasheet_url', type: 'text' },
     { name: 'image_uri', type: 'text' },
     { name: 'cover', type: 'text' },
     { name: 'display_name', type: 'text' },
     { name: 'displayname', type: 'text' },
     { name: 'source_gcs_uri', type: 'text' },
     { name: 'verified_in_doc', type: 'boolean' },
     { name: 'raw_json', type: 'jsonb' },
     { name: 'last_error', type: 'text' },
     { name: 'created_at', type: 'timestamptz', defaultSql: 'now()' },
     { name: 'updated_at', type: 'timestamptz', defaultSql: 'now()' },
   ];
 
   for (const col of baseColumns) {
     const defaultClause = col.defaultSql ? ` DEFAULT ${col.defaultSql}` : '';
     await db.query(`ALTER TABLE ${qualified} ADD COLUMN IF NOT EXISTS "${col.name}" ${col.type}${defaultClause}`);
     if (col.defaultSql) {
       await db.query(`ALTER TABLE ${qualified} ALTER COLUMN "${col.name}" SET DEFAULT ${col.defaultSql}`);
     }
   }
 
-  const generatedColumns = [
-    { name: 'brand_norm', expression: 'lower(brand)' },
-    { name: 'code_norm', expression: 'lower(code)' },
-    { name: 'pn_norm', expression: 'lower(pn)' },
-  ];
+  const generatedColumns = [{ name: 'brand_norm', expression: 'lower(brand)' }];
 
   for (const col of generatedColumns) {
     await db.query(
       `ALTER TABLE ${qualified} ADD COLUMN IF NOT EXISTS "${col.name}" text GENERATED ALWAYS AS (${col.expression}) STORED`
     );
   }
 
   const fieldEntries = normalizeFieldEntries(fields);
   const reserved = new Set([
     'id',
     ...baseColumns.map((c) => c.name),
     ...generatedColumns.map((c) => c.name),
   ]);
 
   for (const [key, typeInput] of fieldEntries) {
     if (!key || reserved.has(key)) continue;
     const mapped = FIELD_TYPE_MAP[String(typeInput).toLowerCase()] || 'text';
     await db.query(`ALTER TABLE ${qualified} ADD COLUMN IF NOT EXISTS "${key}" ${mapped}`);
   }
 
   await db.query(
     `CREATE UNIQUE INDEX IF NOT EXISTS ux_${table}_brandpn_expr ON ${qualified} (lower(brand), lower(pn))`
   );
 }
 
