diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index 7c30be2ea0520173522e9b53807170a38a5ab1d9..f887d805d8a7e12340fd1e73f739c99586849219 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -644,87 +644,97 @@ async function runAutoIngest({
       seenSeed.add(normed);
       seeds.push(str);
     };
     pushSeed(row.code);
     pushSeed(row.mpn);
     pushSeed(row.part_number);
     pushSeed(row.part_no);
 
     let mpn = seeds.length ? seeds[0] : '';
     if (!mpn && candidateMap.length) mpn = candidateMap[0].raw;
     mpn = String(mpn || '').trim();
     if (!mpn) continue;
     const mpnNorm = normalizeCode(mpn);
     if (!mpnNorm || seenCodes.has(mpnNorm)) continue;
     seenCodes.add(mpnNorm);
 
     const rec = {};
     rec.brand = row.brand || brandName;
     rec.code = mpn;
     rec.series_code = row.series_code ?? row.series ?? baseSeries ?? null;
     if (row.series != null && physicalCols.has('series')) rec.series = row.series;
     rec.datasheet_uri = row.datasheet_uri || gcsUri;
     if (row.datasheet_url) rec.datasheet_url = row.datasheet_url;
     else if (rec.datasheet_uri && rec.datasheet_url == null) rec.datasheet_url = rec.datasheet_uri;
     if (row.mfr_full != null) rec.mfr_full = row.mfr_full;
-    const verified = row.verified_in_doc ?? (candidateNormSet.has(mpnNorm) || mpnNormFromDoc.has(mpnNorm));
+    let verified;
+    if (row.verified_in_doc != null) {
+      if (typeof row.verified_in_doc === 'string') {
+        verified = row.verified_in_doc.trim().toLowerCase() === 'true';
+      } else {
+        verified = Boolean(row.verified_in_doc);
+      }
+    } else {
+      verified = candidateNormSet.has(mpnNorm) || mpnNormFromDoc.has(mpnNorm);
+    }
     rec.verified_in_doc = Boolean(verified);
     rec.image_uri = row.image_uri || coverUri || null;
     if (coverUri && rec.cover == null) rec.cover = coverUri;
     const displayName = row.display_name || row.displayname || `${rec.brand} ${mpn}`;
     rec.display_name = displayName;
     if (rec.displayname == null && displayName != null) rec.displayname = displayName;
     rec.updated_at = now;
 
     for (const [rawKey, rawValue] of Object.entries(row)) {
       const key = String(rawKey || '').trim();
       if (!key) continue;
       const lower = key.toLowerCase();
       if (META_KEYS.has(lower) || BASE_KEYS.has(lower)) continue;
       if (physicalCols.has(lower) || allowedSet.has(lower) || variantSet.has(lower)) {
         rec[lower] = rawValue;
       }
     }
 
     if (blueprint?.code_rules) applyCodeRules(rec.code, rec, blueprint.code_rules, colTypes);
     records.push(rec);
   }
 
   if (!records.length && candidateMap.length) {
     const fallbackSeries = baseSeries || null;
     for (const cand of candidateMap) {
       const norm = cand.norm;
       if (seenCodes.has(norm)) continue;
       seenCodes.add(norm);
+      const verified = mpnNormFromDoc.has(norm);
       const rec = {
         brand: brandName,
         code: cand.raw,
         series_code: fallbackSeries,
         datasheet_uri: gcsUri,
         image_uri: coverUri || null,
         display_name: `${brandName} ${cand.raw}`,
-        verified_in_doc: true,
+        verified_in_doc: verified,
         updated_at: now,
       };
       if (coverUri) rec.cover = coverUri;
       if (physicalCols.has('series') && fallbackSeries != null) rec.series = fallbackSeries;
       if (rec.datasheet_url == null) rec.datasheet_url = rec.datasheet_uri;
       if (rec.display_name != null && rec.displayname == null) rec.displayname = rec.display_name;
       records.push(rec);
     }
   }
 
   // 최후 폴백 줄이기
   if (!records.length) {
     const tmp = 'TMP_' + (Math.random().toString(16).slice(2, 8)).toUpperCase();
     records.push({
       family_slug: family,
       brand: brand || extracted.brand || 'unknown',
       code: tmp,
       series_code: series || code || null,
       datasheet_uri: gcsUri,
       image_uri: coverUri || null,
       cover: coverUri || null,
       display_name: `${brand || extracted.brand || 'unknown'} ${tmp}`,
       displayname: `${brand || extracted.brand || 'unknown'} ${tmp}`,
       datasheet_url: gcsUri,
       verified_in_doc: false,
