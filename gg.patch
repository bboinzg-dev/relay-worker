diff --git a/src/routes/files.js b/src/routes/files.js
index d7b4b45826b9f6622b25442f7a6b6b7ba31cf56d..e74f2737b6c3150eb4bbbea67f94ce8882821186 100644
--- a/src/routes/files.js
+++ b/src/routes/files.js
@@ -73,44 +73,54 @@ router.post('/upload', upload.single('file'), async (req, res) => {
     // 3) Cloud Tasks가 설정되어 있으면 enq, 아니면 즉시 분석
     const queue = process.env.QUEUE_NAME;
     const location = process.env.TASKS_LOCATION;
     const workerUrl = process.env.WORKER_TASK_URL; // e.g. https://worker-xxxx.run.app/api/worker/ingest
     const invokerSA = process.env.TASKS_INVOKER_SA;
 
     if (queue && location && workerUrl) {
       const client = new CloudTasksClient();
       const parent = client.queuePath(process.env.GCP_PROJECT_ID || process.env.GOOGLE_CLOUD_PROJECT, location, queue);
 
       const runId = generateRunId();
       const queuePayload = {
         ...payload,
         runId,
         run_id: runId,
         gcs_uri: payload.gcsUri,
       };
       const body = Buffer.from(JSON.stringify(queuePayload)).toString('base64');
       const audience = process.env.WORKER_AUDIENCE || workerUrl;
       const httpRequest = {
         url: workerUrl,
         httpMethod: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body,
       };
-      const task = { httpRequest };
       if (invokerSA) {
-        task.httpRequest.oidcToken = { serviceAccountEmail: invokerSA, audience };
+        httpRequest.oidcToken = { serviceAccountEmail: invokerSA, audience };
       }
+      const task = {
+        httpRequest,
+        dispatchDeadline: process.env.TASKS_DISPATCH_DEADLINE || '150s',
+        scheduleTime: { seconds: Math.floor(Date.now() / 1000) + 5 },
+        retryConfig: {
+          maxAttempts: 12,
+          minBackoff: { seconds: 1 },
+          maxBackoff: { seconds: 60 },
+          maxDoublings: 4,
+        },
+      };
 
       const [resp] = await client.createTask({ parent, task });
       return res.json({ ok: true, gcsUri, enqueued: true, task: resp.name, run_id: runId });
     }
 
     // fallback: 즉시 실행
     const result = await runAutoIngest(payload);
     return res.json({ ok: true, gcsUri, enqueued: false, result });
   } catch (e) {
     console.error(e);
     res.status(400).json({ ok: false, error: String(e.message || e) });
   }
 });
 
 module.exports = router;
