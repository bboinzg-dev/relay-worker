diff --git a/src/utils/ordering-sections.js b/src/utils/ordering-sections.js
index eec60c797ba5d389a41cff69c5a2453ceec2c6af..68fdca816aae42fe087ba913a31c3c66571ce381 100644
--- a/src/utils/ordering-sections.js
+++ b/src/utils/ordering-sections.js
@@ -1,29 +1,31 @@
 'use strict';
 
+const { PN_CANDIDATE_SOURCE } = require('./patterns');
+
 const ORDERING_ANCHOR_RE = /(ORDER(?:ING)?\s+(INFO|INFORMATION|GUIDE|CODE|NUMBER)|HOW\s+TO\s+ORDER|주문\s*정보|주문\s*코드|订购信息|订货信息|PART\s*(?:NO\.?|NUMBER)|品番|型番|품번)/i;
-const ORDERING_CANDIDATE_RE = /[A-Z][A-Z0-9](?:[A-Z0-9\-\.]{1,18})/g;
+const ORDERING_CANDIDATE_RE = new RegExp(PN_CANDIDATE_SOURCE, 'g');
 const ORDERING_BLACKLIST_RE = /^(ISO|ROHS|UL|VDC|VAC|A|MA|MM|Ω|OHM|PDF|PAGE|NOTE|DATE|LOT|WWW|HTTP|HTTPS)$/i;
 
 function normalizeCode(str) {
   return String(str || '')
     .replace(/[–—]/g, '-')
     .replace(/\s+/g, '')
     .replace(/-+/g, '-')
     .toUpperCase();
 }
 
 function clampWindow(text, index, before = 8000, after = 12000) {
   const len = text.length;
   if (!Number.isFinite(index) || index < 0 || index > len) {
     return { text, start: 0, end: len, anchorIndex: -1 };
   }
   const start = Math.max(0, index - before);
   const end = Math.min(len, index + after);
   return { text: text.slice(start, end), start, end, anchorIndex: index };
 }
 
 function extractOrderingWindow(full, { before = 8000, after = 12000 } = {}) {
   const raw = String(full || '');
   if (!raw) {
     return { text: '', start: 0, end: 0, anchorIndex: -1 };
   }
