diff --git a/server.retail.import.js b/server.retail.import.js
index 69f10bee74e90010d8a8f18dc1888e5e250f1464..d7521f4f5928c80f08efc015a48c4ad53879ad34 100644
--- a/server.retail.import.js
+++ b/server.retail.import.js
@@ -1,41 +1,86 @@
 'use strict';
 
 const express = require('express');
+const { Transform } = require('stream');
+const { Pool } = require('pg');
+const QueryStream = require('pg-query-stream');
+const { Storage } = require('@google-cloud/storage');
 const { ProductServiceClient } = require('@google-cloud/retail').v2;
 
 const router = express.Router();
 
-const client = new ProductServiceClient();
+const pool = new Pool({ connectionString: process.env.DATABASE_URL });
+const storage = new Storage();
+const retail = new ProductServiceClient();
 
 const PROJECT_NUMBER = process.env.GCP_PROJECT_NUMBER;
-const BRANCH = PROJECT_NUMBER
-  ? `projects/${PROJECT_NUMBER}/locations/global/catalogs/default_catalog/branches/default_branch`
-  : '';
-const GCS_URI = process.env.GCS_BUCKET
-  ? `gs://${process.env.GCS_BUCKET}/retail/catalog/products.ndjson`
-  : '';
+const BRANCH = process.env.RETAIL_BRANCH ||
+  (PROJECT_NUMBER
+    ? `projects/${PROJECT_NUMBER}/locations/global/catalogs/default_catalog/branches/default_branch`
+    : '');
+const TEMP_BUCKET = process.env.GCS_TEMP_BUCKET || '';
+
+function createObjectPath() {
+  const now = new Date();
+  const pad = (n, l = 2) => String(n).padStart(l, '0');
+  const timestamp = `${now.getUTCFullYear()}${pad(now.getUTCMonth() + 1)}${pad(now.getUTCDate())}` +
+    `${pad(now.getUTCHours())}${pad(now.getUTCMinutes())}${pad(now.getUTCSeconds())}`;
+  return `retail/import/products_${timestamp}_${Date.now()}.ndjson`;
+}
 
 router.post('/api/retail/import', async (req, res, next) => {
+  if (!BRANCH) {
+    res.status(500).json({ done: false, error: 'RETAIL_BRANCH or GCP_PROJECT_NUMBER not configured' });
+    return;
+  }
+  if (!TEMP_BUCKET) {
+    res.status(500).json({ done: false, error: 'GCS_TEMP_BUCKET not configured' });
+    return;
+  }
+
+  const dbClient = await pool.connect();
+  const objectPath = createObjectPath();
+  const bucket = storage.bucket(TEMP_BUCKET);
+  const gcsFile = bucket.file(objectPath);
+  const gcsUri = `gs://${TEMP_BUCKET}/${objectPath}`;
+
   try {
-    if (!BRANCH) {
-      res.status(500).json({ done: false, error: 'GCP_PROJECT_NUMBER not configured' });
-      return;
-    }
-    if (!GCS_URI) {
-      res.status(500).json({ done: false, error: 'GCS_BUCKET not configured' });
-      return;
-    }
-
-    const [op] = await client.importProducts({
+    const query = new QueryStream('SELECT line FROM retail.export_products_ndjson()');
+    const pgStream = dbClient.query(query);
+
+    let count = 0;
+    const toNdjson = new Transform({
+      objectMode: true,
+      transform(row, _enc, callback) {
+        count += 1;
+        callback(null, `${row.line}\n`);
+      },
+    });
+
+    await new Promise((resolve, reject) => {
+      pgStream
+        .pipe(toNdjson)
+        .pipe(gcsFile.createWriteStream({
+          resumable: false,
+          contentType: 'application/x-ndjson',
+        }))
+        .on('finish', resolve)
+        .on('error', reject);
+    });
+
+    const [op] = await retail.importProducts({
       parent: BRANCH,
-      inputConfig: { gcsSource: { inputUris: [GCS_URI] } },
+      inputConfig: { gcsSource: { inputUris: [gcsUri] } },
       reconciliationMode: 'INCREMENTAL',
     });
     const [resp] = await op.promise();
-    res.json({ done: true, result: resp });
+
+    res.json({ done: true, result: resp, gcsUri, branch: BRANCH, count });
   } catch (err) {
     next(err);
+  } finally {
+    dbClient.release();
   }
 });
 
 module.exports = router;
\ No newline at end of file