diff --git a/src/utils/schema.js b/src/utils/schema.js
index d6bb814cb56370f0381b51a6bb07220bd10f8803..16626dc49f257ac30b122776d8d1e133b53df8e3 100644
--- a/src/utils/schema.js
+++ b/src/utils/schema.js
@@ -1,43 +1,35 @@
 'use strict';
 
-const crypto = require('node:crypto');
 const db = require('../../db');
 
 function isMinimalInsertEnabled() {
-  return /^(1|true|on)$/i.test(String(process.env.ALLOW_MINIMAL_INSERT || '').trim());
+  return String(process.env.ALLOW_MINIMAL_INSERT || '').trim() === '1';
 }
 
-function buildMinimalPnFallback(values = {}) {
-  const uri = values?.datasheet_uri || values?.datasheet_url || values?.gcs_uri || values?.gcsUri || '';
-  const brand = values?.brand || '';
-  const code = values?.code || '';
-  const series = values?.series || values?.series_code || '';
-  const seed = String(uri || `${brand}:${code}:${series}` || '').trim();
-  if (!seed) return null;
-  const hash = crypto.createHash('sha1').update(seed).digest('hex');
-  return `pdf:${hash.slice(0, 12)}`;
+function buildMinimalPnFallback() {
+  return null;
 }
 
 function normalizeIdentifier(name) {
   return String(name || '')
     .trim()
     .toLowerCase()
     .replace(/[^a-z0-9_]/g, '');
 }
 
 function parseTableName(tableName) {
   const safe = String(tableName || '')
     .trim()
     .toLowerCase()
     .replace(/[^a-z0-9_.]/g, '');
   if (!safe) throw new Error('invalid table name');
 
   let schema = 'public';
   let table = safe;
   if (safe.includes('.')) {
     const parts = safe.split('.').filter(Boolean);
     if (!parts.length) throw new Error('invalid table name');
     if (parts.length === 1) {
       table = parts[0];
     } else {
       schema = parts[0];
