diff --git a/src/services/docai.js b/src/services/docai.js
index 6b03be532203a6e51e8641e222d7de4c2da1866a..bf7d48c28c3fc15795511b622aebe92e6ce04e94 100644
--- a/src/services/docai.js
+++ b/src/services/docai.js
@@ -1,97 +1,131 @@
 'use strict';
 
+const path = require('node:path');
+
 let DocumentProcessorServiceClient;
 try {
   ({ DocumentProcessorServiceClient } = require('@google-cloud/documentai').v1);
 } catch (err) {
   DocumentProcessorServiceClient = null;
 }
 
 const { storage, parseGcsUri } = require('../utils/gcs');
 
-let cachedClient = null;
+const clientsByLocation = new Map();
 
-function getClient() {
+function getClient(location = 'us') {
   if (!DocumentProcessorServiceClient) return null;
-  if (!cachedClient) {
-    cachedClient = new DocumentProcessorServiceClient();
+  const loc = location || 'us';
+  if (!clientsByLocation.has(loc)) {
+    clientsByLocation.set(
+      loc,
+      new DocumentProcessorServiceClient({
+        apiEndpoint: `${loc}-documentai.googleapis.com`,
+      })
+    );
   }
-  return cachedClient;
+  return clientsByLocation.get(loc);
 }
 
-function buildProcessorName() {
+function buildProcessorConfig() {
   const project =
     process.env.DOCAI_PROJECT_ID ||
     process.env.DOC_AI_PROJECT_ID ||
     process.env.GCP_PROJECT_ID ||
     process.env.GOOGLE_CLOUD_PROJECT;
   const location =
     process.env.DOCAI_LOCATION ||
     process.env.DOC_AI_LOCATION ||
     'us';
   const processor = process.env.DOCAI_PROCESSOR_ID;
   if (!project || !processor) return null;
   return {
     name: `projects/${project}/locations/${location}/processors/${processor}`,
+    location,
   };
 }
 
 function collectText(document = {}) {
   const fullText = document.text || '';
   const tables = [];
 
   const getText = (layout) => {
     const segments = layout?.textAnchor?.textSegments || [];
     let out = '';
     for (const seg of segments) {
       const start = Number(seg.startIndex || 0);
       const end = Number(seg.endIndex || 0);
       out += fullText.slice(start, end);
     }
     return out.trim();
   };
 
   for (const page of Array.isArray(document.pages) ? document.pages : []) {
     for (const table of Array.isArray(page.tables) ? page.tables : []) {
       const headers = [];
       const headerRow = table.headerRows?.[0];
       for (const cell of Array.isArray(headerRow?.cells) ? headerRow.cells : []) {
         headers.push(getText(cell.layout));
       }
       const rows = [];
       for (const bodyRow of Array.isArray(table.bodyRows) ? table.bodyRows : []) {
         const row = [];
         for (const cell of Array.isArray(bodyRow.cells) ? bodyRow.cells : []) {
           row.push(getText(cell.layout));
         }
         rows.push(row);
       }
       tables.push({ headers, rows });
     }
   }
 
   return { text: fullText, tables };
 }
 
 async function processDocument(gcsUri) {
-  const cfg = buildProcessorName();
+  const cfg = buildProcessorConfig();
   if (!cfg) return null;
-  const client = getClient();
+  const client = getClient(cfg.location);
   if (!client) return null;
 
   const { bucket, name } = parseGcsUri(gcsUri);
-  const [buf] = await storage.bucket(bucket).file(name).download();
+  const baseDir = path.posix.dirname(name);
+  const baseName = path.posix.basename(name, path.posix.extname(name));
+  const suffix = `${baseName || 'doc'}-${Date.now()}`;
+  const dir = baseDir && baseDir !== '.' ? `${baseDir}/docai/${suffix}` : `docai/${suffix}`;
+  const outputPrefix = `gs://${bucket}/${dir}/`;
 
   const request = {
     name: cfg.name,
-    rawDocument: { content: buf, mimeType: 'application/pdf' },
-    skipHumanReview: true,
+    inputDocuments: {
+      gcsDocuments: {
+        documents: [{ gcsUri, mimeType: 'application/pdf' }],
+      },
+    },
+    documentOutputConfig: {
+      gcsOutputConfig: { gcsUri: outputPrefix },
+    },
   };
 
-  const [result] = await client.processDocument(request);
-  const document = result?.document;
-  if (!document) return null;
-  return collectText(document);
+  const [operation] = await client.batchProcessDocuments(request);
+  await operation.promise();
+
+  const { bucket: outBucket, name: outPrefix } = parseGcsUri(outputPrefix);
+  const [files] = await storage.bucket(outBucket).getFiles({ prefix: outPrefix });
+  const jsonFiles = files.filter((file) => file.name && file.name.endsWith('.json'));
+  for (const file of jsonFiles) {
+    try {
+      const [buf] = await file.download();
+      const parsed = JSON.parse(buf.toString('utf8'));
+      const document = parsed?.document || parsed;
+      if (document?.text) {
+        return collectText(document);
+      }
+    } catch (err) {
+      console.warn('[DocAI] failed to parse output', err?.message || err);
+    }
+  }
+  return null;
 }
 
-module.exports = { processDocument };
+module.exports = { processDocument };
