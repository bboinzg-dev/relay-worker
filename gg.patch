diff --git a/server.js b/server.js
index 2c32e158cab5a7abdfcf613ae04cae9944c94b37..f94a02b2e6e9758f9053112170bb175d72f1b4f8 100644
--- a/server.js
+++ b/server.js
@@ -29,51 +29,63 @@ const { generateRunId } = require('./src/utils/run-id');
  try { require('./src/tasks/embedFamilies').run().catch(console.error); } catch {}
 
  // lazy init: gRPC 문제 대비 regional endpoint + REST fallback
  let _tasks = null;
  let _queuePath = null;
  function getTasks() {
    if (!_tasks) {
     // 글로벌 엔드포인트 + REST fallback(HTTP/1)
     _tasks = new CloudTasksClient({ fallback: true });
      _queuePath = _tasks.queuePath(PROJECT_ID, TASKS_LOCATION, QUEUE_NAME);
    }
    return { tasks: _tasks, queuePath: _queuePath };
  }
 
 async function enqueueWorkerStep(payload = {}) {
   const { tasks, queuePath } = getTasks();
   if (!TASKS_INVOKER_SA) throw new Error('TASKS_INVOKER_SA not set');
   const audience = process.env.WORKER_AUDIENCE || new URL(WORKER_STEP_URL).origin;
 
   const bodyPayload = { ...payload };
   const runId = bodyPayload.runId || bodyPayload.run_id || generateRunId();
   bodyPayload.runId = runId;
   bodyPayload.run_id = runId;
 
   const body = Buffer.from(JSON.stringify(bodyPayload)).toString('base64');
-  const dispatchDeadline = process.env.TASKS_DISPATCH_DEADLINE || '150s';
+  const rawDispatchDeadline = process.env.TASKS_DISPATCH_DEADLINE;
+  const parsedDispatchDeadline = Number.parseFloat(
+    typeof rawDispatchDeadline === 'string'
+      ? rawDispatchDeadline.replace(/s$/i, '')
+      : rawDispatchDeadline
+  );
+  const dispatchDeadlineSeconds = Number.isFinite(parsedDispatchDeadline)
+    ? parsedDispatchDeadline
+    : 150;
+  const dispatchDeadline = {
+    seconds: Math.min(Math.max(0, Math.ceil(dispatchDeadlineSeconds)), 1800),
+    nanos: 0,
+  };
   const scheduleDelaySeconds = Number.isFinite(Number(process.env.TASKS_SCHEDULE_DELAY_SECONDS))
     ? Math.max(0, Number(process.env.TASKS_SCHEDULE_DELAY_SECONDS))
     : 5;
   const scheduledSeconds = Math.floor(Date.now() / 1000) + Math.max(scheduleDelaySeconds, 5);
 
   const task = {
     httpRequest: {
       httpMethod: 'POST',
       url: WORKER_STEP_URL,
       headers: { 'Content-Type': 'application/json' },
       body,
       ...(TASKS_INVOKER_SA
         ? { oidcToken: { serviceAccountEmail: TASKS_INVOKER_SA, audience } }
         : {}),
     },
     dispatchDeadline,
     scheduleTime: { seconds: scheduledSeconds }, // cold start buffer
     retryConfig: {
       maxAttempts: 12,
       minBackoff: { seconds: 1 },
       maxBackoff: { seconds: 60 },
       maxDoublings: 4,
     },
   };
 
