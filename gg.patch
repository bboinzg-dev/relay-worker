diff --git a/src/ingest/mpn-exploder.js b/src/ingest/mpn-exploder.js
index ce4d999d155c0004cb701a1cf175efcee481b06f..58a3725ed946150db9c00bdd581bea55eff9da43 100644
--- a/src/ingest/mpn-exploder.js
+++ b/src/ingest/mpn-exploder.js
@@ -29,50 +29,59 @@ function normalizeList(raw) {
 
 function escapeRegExp(str) {
   return String(str || '').replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
 }
 
 function applyTemplateMods(value, mods = []) {
   if (value == null) return '';
 
   let out = Array.isArray(value) ? value[0] : value;
   if (out == null) return '';
   if (typeof out !== 'string') out = String(out);
 
   for (const rawMod of mods) {
     const token = String(rawMod || '').trim();
     if (!token) continue;
     const [opRaw, argRaw = ''] = token.split('=').map((t) => t.trim());
     const op = opRaw.toLowerCase();
     if (!op) continue;
 
     if (op === 'pad') {
       const width = Number(argRaw);
       if (Number.isFinite(width) && width > 0) out = out.padStart(width, '0');
       continue;
     }
 
+    if (op === 'map') {
+      try {
+        const lut = JSON.parse(argRaw);
+        const key = String(out);
+        if (lut[key] != null) out = lut[key];
+      } catch {}
+      continue;
+    }
+
     if (op === 'first') {
       const parts = out.split(',');
       out = parts.length ? parts[0].trim() : out;
       continue;
     }
 
     if (op === 'alnum') {
       out = out.replace(/[^0-9A-Z]/gi, '');
       continue;
     }
 
     if (op === 'digits') {
       const match = out.match(/\d+/g) || [''];
       out = match.join('');
       continue;
     }
 
     if (op === 'upper' || op === 'upcase' || op === 'uppercase') {
       out = out.toUpperCase();
       continue;
     }
 
     if (op === 'lower' || op === 'downcase' || op === 'lowercase') {
       out = out.toLowerCase();
       continue;
