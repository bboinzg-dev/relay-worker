diff --git a/src/utils/enqueue.js b/src/utils/enqueue.js
index 6733242bab652a79fdb0b5984218d9e28e364b8a..f789859605c60f72d5a5c628f7bd9e527086236a 100644
--- a/src/utils/enqueue.js
+++ b/src/utils/enqueue.js
@@ -30,35 +30,37 @@ async function enqueueIngest(payload = {}) {
 
   if (!project || !url) throw new Error(`enqueue config missing: project=${project}, url=${url}`);
 
   const parent  = client.queuePath(project, location, queue);
   const saEmail =
     process.env.TASKS_INVOKER_SA ||
     process.env.TASKS_INVOKER_SA_EMAIL ||
     process.env.TASKS_SERVICE_ACCOUNT_EMAIL;
 
   if (!saEmail) throw new Error('TASKS_INVOKER_SA not set');
 
   const audience = resolveAudience(url);
   const body     = Buffer.from(JSON.stringify(payload)).toString('base64');
 
   const task = {
     httpRequest: {
       httpMethod: 'POST',
       url,
       headers: { 'Content-Type': 'application/json' },
       body,
       oidcToken: { serviceAccountEmail: saEmail, audience },
     },
   };
 
   const raw = process.env.TASKS_DISPATCH_DEADLINE || process.env.TASKS_DEADLINE_SEC;
-  if (raw) {
-    const secs = Number(String(raw).replace(/s$/i,''));
-    if (Number.isFinite(secs)) task.dispatchDeadline = { seconds: Math.max(0, Math.ceil(secs)) };
-  }
+  const parsed = Number.parseFloat(typeof raw === 'string' ? raw.replace(/s$/i, '') : raw);
+  const deadlineSeconds = Math.min(
+    Math.max(Number.isFinite(parsed) ? parsed : 900, 30),
+    1800
+  );
+  task.dispatchDeadline = { seconds: Math.ceil(deadlineSeconds), nanos: 0 };
 
   const [resp] = await client.createTask({ parent, task });
   return resp.name;
 }
 
 module.exports = { enqueueIngest };
