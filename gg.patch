diff --git a/src/ai/datasheetExtract.js b/src/ai/datasheetExtract.js
index 083b2f646b12be10d2a41f94075d2af7a6a750ea..854f7a3d58ccc66959afddeee57d345b1cfe5d7a 100644
--- a/src/ai/datasheetExtract.js
+++ b/src/ai/datasheetExtract.js
@@ -266,29 +266,39 @@ async function extractPartsAndSpecsFromPdf({ gcsUri, allowedKeys, brandHint = nu
   const mapped = await geminiMapValues({
     family: null,
     brandHint: brand,
     codes: codes.slice(0, MAX_PARTS),
     allowedKeys,
     docText: fullText,
     tablePreview
   });
 
   // 병합
   const out = [];
   const seen = new Set();
   for (const m of mapped) {
     const code = String(m?.code || '').trim().toUpperCase();
     if (!code || seen.has(code)) continue;
     seen.add(code);
     const row = { code, verified_in_doc: true };
     if (m?.brand) row.brand = m.brand;
     const values = m?.values || {};
     for (const k of allowedKeys) { if (values[k] != null) row[k] = values[k]; }
     out.push(row);
   }
 
   if (!out.length) for (const c of codes.slice(0, MAX_PARTS)) out.push({ code: c, verified_in_doc: true });
 
-  return { brand, rows: out.slice(0, MAX_PARTS), text: fullText };
+  const tableList = Array.isArray(docai?.tables) ? docai.tables : [];
+  const codeList = codes.slice(0, MAX_PARTS);
+
+  return {
+    brand,
+    rows: out.slice(0, MAX_PARTS),
+    text: fullText,
+    tables: tableList,
+    codes: codeList,
+    mpn_list: codeList,
+  };
 }
 
 module.exports = { extractPartsAndSpecsFromPdf };
