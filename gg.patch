diff --git a/src/utils/mpn-exploder.js b/src/utils/mpn-exploder.js
index 392ab9786248bae3901a7e8f16ad0f7411ddea06..386627ea8b2672a71c551029fdc01a8c92477d78 100644
--- a/src/utils/mpn-exploder.js
+++ b/src/utils/mpn-exploder.js
@@ -363,54 +363,53 @@ function explodeToRows(base, options = {}) {
     else {
       delete rowValues.coil_voltage_vdc;
       delete rowValues.coil_voltagevdc;
     }
 
     const canUseTemplate = pnTemplate && normalizedSeries;
 
     let generatedByTemplate = false;
     let generatedByFallback = false;
     let code = null;
 
     if (pnTemplate && canUseTemplate) {
       code = renderTemplate(pnTemplate, {
         ...rowValues,
         series: normalizedSeries,
         series_code: normalizedSeries,
         contact_form: normalizedContactForm,
         coil_voltage_vdc: normalizedCoilVoltage,
       });
       generatedByTemplate = true;
     } else if (mpnCandidates[idx]) {
       code = mpnCandidates[idx];
     } else if (mpnCandidates.length) {
       code = mpnCandidates[0];
     } else {
+      if (!normalizedSeries) return;
       const parts = [];
-      if (normalizedSeries) parts.push(normalizedSeries);
-      else if (base?.series) parts.push(base.series);
-      else if (base?.series_code) parts.push(base.series_code);
+      parts.push(normalizedSeries);
       const suffix = variantKeys
         .map((key) => rowValues[key] ?? rowValues[key?.toLowerCase()])
         .filter((v) => v != null && v !== '')
         .map((v) => String(v))
         .join('');
       if (suffix) parts.push(suffix);
       code = parts.join('');
       generatedByFallback = true;
     }
 
     code = String(code || '').trim();
     if (!code) return;
 
     if ((generatedByTemplate || generatedByFallback) && !isLikelyPn(code)) return;
 
     const codeNorm = code.toLowerCase();
     if (rows.some((r) => r.code_norm === codeNorm)) return;
 
     rows.push({
       code,
       code_norm: codeNorm,
       values: rowValues,
     });
   });