diff --git a/src/utils/blueprint.js b/src/utils/blueprint.js
index 9d0fc9c7f819ce73e61ef088b60d99f9571c322c..490c49ededde55c40ad8a4ef44a12b810d4b901a 100644
--- a/src/utils/blueprint.js
+++ b/src/utils/blueprint.js
@@ -25,62 +25,83 @@ function normalizeKeyList(list) {
   return out;
 }
 
 function deriveAllowedKeys(fieldsJson = {}, ingestOptions = {}) {
   if (Array.isArray(ingestOptions.allowed_keys)) {
     const explicit = normalizeKeyList(ingestOptions.allowed_keys);
     if (explicit.length) return explicit;
   }
   return normalizeKeyList(Object.keys(fieldsJson || {}));
 }
 
 function deriveVariantKeys(blueprintRow = {}) {
   const ingestOptions = blueprintRow.ingest_options || blueprintRow.ingestOptions || {};
   if (Array.isArray(ingestOptions.variant_keys)) {
     return normalizeKeyList(ingestOptions.variant_keys);
   }
   if (Array.isArray(blueprintRow.variant_keys)) {
     return normalizeKeyList(blueprintRow.variant_keys);
   }
   return [];
 }
 
 function normalizeBlueprint(row, registryRow) {
   if (!row) return null;
   const fields = row.fields_json || row.fields || {};
-  const ingestOptions = row.ingest_options || row.ingestOptions || {};
+  const ingestOptionsRaw = row.ingest_options || row.ingestOptions || {};
+  const ingestOptions = ingestOptionsRaw && typeof ingestOptionsRaw === 'object'
+    ? { ...ingestOptionsRaw }
+    : {};
   const codeRules = row.code_rules || row.codeRules || null;
-  const allowedKeys = deriveAllowedKeys(fields, ingestOptions);
-  const variantKeys = deriveVariantKeys(row);
+  const allowedKeys = deriveAllowedKeys(fields, ingestOptionsRaw);
+  let variantKeys = deriveVariantKeys(row);
   const specsTable = registryRow?.specs_table || registryRow?.specsTable || `${row.family_slug}_specs`;
 
+  const forceVariant = (list) => normalizeKeyList(Array.isArray(list) ? list : []);
+  if (row.family_slug === 'relay_power') {
+    const forcedVariants = forceVariant(['coil_voltage_vdc', 'contact_form', 'suffix']);
+    variantKeys = forcedVariants;
+    ingestOptions.variant_keys = forcedVariants;
+    ingestOptions.pn_template = '{{series}}{{contact_form}}{{coil_voltage_vdc|pad=2}}{{suffix}}';
+  } else if (row.family_slug === 'relay_signal') {
+    const forcedVariants = forceVariant(['coil_voltage_vdc', 'contact_arrangement']);
+    variantKeys = forcedVariants;
+    ingestOptions.variant_keys = forcedVariants;
+  } else if (Array.isArray(ingestOptions.variant_keys)) {
+    ingestOptions.variant_keys = normalizeKeyList(ingestOptions.variant_keys);
+  }
+
+  variantKeys = Array.isArray(variantKeys) ? variantKeys : [];
+
+  const allowedKeysFinal = Array.from(new Set([...(allowedKeys || []), ...variantKeys]));
+
   return {
     family_slug: row.family_slug,
     fields,
     ingestOptions,
     code_rules: codeRules,
-    allowedKeys,
+    allowedKeys: allowedKeysFinal,
     variant_keys: variantKeys,
     specsTable,
   };
 }
 
 function computeFastKeys(blueprint) {
   const ingestOptions = blueprint?.ingestOptions || {};
   if (Array.isArray(ingestOptions.fast_keys)) {
     const list = normalizeKeyList(ingestOptions.fast_keys);
     if (list.length) return list;
   }
 
   const required = [];
   if (blueprint?.fields && typeof blueprint.fields === 'object') {
     for (const [key, meta] of Object.entries(blueprint.fields)) {
       const isRequired = meta && typeof meta === 'object' && Boolean(meta.required);
       if (isRequired) {
         const norm = String(key || '')
           .trim()
           .toLowerCase()
           .replace(/[^a-z0-9_]/g, '');
         if (norm && !required.includes(norm)) required.push(norm);
       }
     }
   }
