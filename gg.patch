diff --git a/src/routes/files.js b/src/routes/files.js
index e74f2737b6c3150eb4bbbea67f94ce8882821186..21c439eb0cca6182c025492331c9c7ee5749f548 100644
--- a/src/routes/files.js
+++ b/src/routes/files.js
@@ -76,51 +76,64 @@ router.post('/upload', upload.single('file'), async (req, res) => {
     const workerUrl = process.env.WORKER_TASK_URL; // e.g. https://worker-xxxx.run.app/api/worker/ingest
     const invokerSA = process.env.TASKS_INVOKER_SA;
 
     if (queue && location && workerUrl) {
       const client = new CloudTasksClient();
       const parent = client.queuePath(process.env.GCP_PROJECT_ID || process.env.GOOGLE_CLOUD_PROJECT, location, queue);
 
       const runId = generateRunId();
       const queuePayload = {
         ...payload,
         runId,
         run_id: runId,
         gcs_uri: payload.gcsUri,
       };
       const body = Buffer.from(JSON.stringify(queuePayload)).toString('base64');
       const audience = process.env.WORKER_AUDIENCE || workerUrl;
       const httpRequest = {
         url: workerUrl,
         httpMethod: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body,
       };
       if (invokerSA) {
         httpRequest.oidcToken = { serviceAccountEmail: invokerSA, audience };
       }
+      const rawDispatchDeadline = process.env.TASKS_DISPATCH_DEADLINE;
+      const parsedDispatchDeadline = Number.parseFloat(
+        typeof rawDispatchDeadline === 'string'
+          ? rawDispatchDeadline.replace(/s$/i, '')
+          : rawDispatchDeadline
+      );
+      const dispatchDeadlineSeconds = Number.isFinite(parsedDispatchDeadline)
+        ? parsedDispatchDeadline
+        : 150;
+      const dispatchDeadline = {
+        seconds: Math.min(Math.max(0, Math.ceil(dispatchDeadlineSeconds)), 1800),
+        nanos: 0,
+      };
       const task = {
         httpRequest,
-        dispatchDeadline: process.env.TASKS_DISPATCH_DEADLINE || '150s',
+        dispatchDeadline,
         scheduleTime: { seconds: Math.floor(Date.now() / 1000) + 5 },
         retryConfig: {
           maxAttempts: 12,
           minBackoff: { seconds: 1 },
           maxBackoff: { seconds: 60 },
           maxDoublings: 4,
         },
       };
 
       const [resp] = await client.createTask({ parent, task });
       return res.json({ ok: true, gcsUri, enqueued: true, task: resp.name, run_id: runId });
     }
 
     // fallback: 즉시 실행
     const result = await runAutoIngest(payload);
     return res.json({ ok: true, gcsUri, enqueued: false, result });
   } catch (e) {
     console.error(e);
     res.status(400).json({ ok: false, error: String(e.message || e) });
   }
 });
 
 module.exports = router;
