diff --git a/server.js b/server.js
index 0b4d0e2492352fe13fae55c7246495f45fe472d6..c4bb1e322258ba5dca3e7a0af4407f7ab859d5b2 100644
--- a/server.js
+++ b/server.js
@@ -7,59 +7,63 @@ const EXT_CALLS_OFF = process.env.EXT_CALLS_OFF === '1';
 process.on('uncaughtException', (e) => {
   console.error('[FATAL][uncaughtException]', e?.message, e?.stack?.split('\n').slice(0, 4).join(' | '));
   process.exit(1);
 });
 process.on('unhandledRejection', (e) => {
   console.error('[FATAL][unhandledRejection]', e);
   process.exit(1);
 });
 
 // 필수 env 스모크 로그(민감값 제외)
 (() => {
   const pick = (k) => (process.env[k] || '').toString();
   console.log('[BOOT env check]', {
     GCP_PROJECT_ID: !!pick('GCP_PROJECT_ID'),
     VERTEX_LOCATION: pick('VERTEX_LOCATION'),
     DOCAI_PROCESSOR_ID: !!pick('DOCAI_PROCESSOR_ID'),
     GCS_BUCKET: pick('GCS_BUCKET'),
     QUEUE_NAME: pick('QUEUE_NAME'),
     TASKS_LOCATION: pick('TASKS_LOCATION'),
     GEMINI_MODEL_CLASSIFY: pick('GEMINI_MODEL_CLASSIFY'),
     GEMINI_MODEL_EXTRACT: pick('GEMINI_MODEL_EXTRACT'),
     JWT_SECRET: !!pick('JWT_SECRET'),
   });
 })();
 
+// --- built-ins (한 번만) ---
+const path = require('node:path');
+const fs = require('node:fs');
+
+// --- 3rd-party ---
 const express = require('express');
 const cors = require('cors');
 const bodyParser = require('body-parser');
 const multer = require('multer');
 const crypto = require('crypto');
 const jwt = require('jsonwebtoken');
-const path = require('node:path');
-const fs = require('node:fs');
 
+// --- local ---
 // 1) DB 모듈: 로드 실패해도 서버는 떠야 함
 let db;
 try {
   db = require('./db');
 } catch (err) {
   console.error('[BOOT] db load failed:', err?.message || err);
   db = { query: async () => { throw new Error('DB_UNAVAILABLE'); } };
 }
 const { getSignedUrl, canonicalDatasheetPath, canonicalCoverPath, moveObject, storage, parseGcsUri } = require('./src/utils/gcs');
 const { ensureSpecsTable, upsertByBrandCode } = require('./src/utils/schema');
 // 3) ingestAuto: 부팅 시점에 절대 로드하지 말고, 요청 시점에만 로드
 let __INGEST_MOD__ = null;
 function getIngest() {
   if (__INGEST_MOD__) return __INGEST_MOD__;
   try {
     const modPath = path.join(__dirname, 'src', 'pipeline', 'ingestAuto.js');
     __INGEST_MOD__ = require(modPath);
   } catch (e) {
     console.error('[INGEST] module load failed:', e?.message || e);
     if (e?.stack) console.error('[INGEST] stack:', e.stack);
     try {
       const dir = path.join(__dirname, 'src', 'pipeline');
       console.error('[INGEST] ls src/pipeline =', fs.readdirSync(dir));
       console.error('[INGEST] CWD =', process.cwd(), ' __dirname =', __dirname);
     } catch {}
