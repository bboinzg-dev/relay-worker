diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index 96eac57735b06e95050483e2dd4676656b96d635..f4003781b131b87457e0e56b5375556e9cebe49f 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -5202,56 +5202,55 @@ async function persistProcessedData(processed = {}, overrides = {}) {
           try {
             blueprint = await getBlueprint(family);
           } catch (err) {
             console.warn('[persist] blueprint fetch failed for key widening:', err?.message || err);
           }
         }
         const knownList = Array.isArray(blueprint?.allowedKeys) ? [...blueprint.allowedKeys] : [];
         allowedKeys = knownList.length ? [...knownList] : allowedKeys;
         const knownLower = new Set(
           knownList.map((key) => String(key || '').trim().toLowerCase()).filter(Boolean),
         );
         const runtimeKeys = Array.from(gatherRuntimeSpecKeys(schemaEnsureRows));
         const unknownKeys = Array.from(
           new Set(
             runtimeKeys
               .map((key) => String(key || '').trim())
               .filter((key) => key && !knownLower.has(key.toLowerCase())),
           ),
         );
         if (unknownKeys.length) {
           try {
             const { map } = await aiCanonicalizeKeys(family, unknownKeys, knownList);
             const widened = new Set(knownList);
             for (const key of unknownKeys) {
               const rec = map?.[key] || {};
-              let target = String(rec.canonical || '').trim();
-              if (!target || rec.action !== 'map') target = key;
+              const target = rec.action === 'map' ? String(rec.canonical || '').trim() : '';
+              if (!target) continue;
               const lower = target.toLowerCase();
-              if (!lower || knownLower.has(lower)) continue;
-              knownLower.add(lower);
-              widened.add(target);
+              if (!lower || !knownLower.has(lower)) continue;
+              if (!widened.has(target)) widened.add(target);
             }
             blueprint = blueprint && typeof blueprint === 'object' ? blueprint : {};
             blueprint.allowedKeys = Array.from(widened);
             allowedKeys = Array.from(blueprint.allowedKeys);
           } catch (err) {
             console.warn('[persist] aiCanonicalizeKeys failed:', err?.message || err);
           }
         }
       }
 
       if (Array.isArray(processedRowsInput) && processedRowsInput.length) {
         await ensureDynamicColumnsForRows(
           qualified,
           processedRowsInput,
           allowedKeys,
         );
       }
       await ensureDynamicColumnsForRows(
         qualified,
         schemaEnsureRows,
         allowedKeys,
       );
       // 폭발/병합이 끝났다면 이걸 저장 대상으로 사용
       records = Array.isArray(explodedRows) && explodedRows.length ? explodedRows : records;
       await ensureDynamicColumnsForRows(