diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index 108f7e71310b8bd61a2f4721624546e1a217a709..2478747ad00f60932e3d925ea261d6b9fdebeab8 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -871,49 +871,49 @@ async function saveExtractedSpecs(targetTable, familySlug, rows = [], options =
           const parsed = JSON.parse(rec.raw_json);
           if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) rawJson = parsed;
         } catch (_) {}
       }
 
       const sanitized = {};
       for (const col of colList) {
         if (col === 'raw_json') continue;
         const original = rec[col];
         sanitized[col] = coerceColumnValue(col, original, columnTypes, rec, rawJson, warnings);
       }
 
       if (physicalCols.has('raw_json')) {
         sanitized.raw_json = Object.keys(rawJson).length ? JSON.stringify(rawJson) : null;
       }
 
       const vals = insertCols.map((col) => {
         if (col === 'raw_json') return sanitized.raw_json ?? null;
         return sanitized[col] ?? null;
       });
 
       try {
         await client.query('BEGIN');
         if (appNameSuffix) {
           await client.query(
-            `SET LOCAL application_name = current_setting('application_name', true) || $1`,
+            `SELECT set_config('application_name', current_setting('application_name', true) || $1, true)`,
             [appNameSuffix],
           );
         }
         const res = await client.query(sql, vals);
         await client.query('COMMIT');
         const delta = res.rowCount || 0;
         result.upserts += delta;
         result.affected += delta;
         if (res.rows?.[0]?.pn) result.written.push(res.rows[0].pn);
       } catch (err) {
         await client.query('ROLLBACK').catch(() => {});
         result.skipped.push({ reason: 'db_error', detail: err?.message || String(err) });
       }
     }
   } finally {
     client.release();
   }
 
   result.warnings = Array.from(warnings);
   return result;
 }
 
 module.exports = { saveExtractedSpecs, looksLikeTemplate, renderAnyTemplate };
