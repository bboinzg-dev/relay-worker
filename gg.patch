diff --git a/src/utils/blueprint.js b/src/utils/blueprint.js
index 5c8421acd5ecf89c346851ddc6240a705f1652cc..3ad9a3971603b3d26a6fc1bb9b802faf13dfbca0 100644
--- a/src/utils/blueprint.js
+++ b/src/utils/blueprint.js
@@ -68,51 +68,67 @@ function ensureFamilyOverrides(blueprint, registryRow) {
     }
     if (!ingestOptions.pn_template && ingestOptions.pnTemplate) {
       ingestOptions.pn_template = ingestOptions.pnTemplate;
     }
     if (!ingestOptions.pnTemplate && ingestOptions.pn_template) {
       ingestOptions.pnTemplate = ingestOptions.pn_template;
     }
   };
 
   if (family === 'relay_power') {
     addVariantKeys(['coil_voltage_vdc', 'contact_form', 'suffix']);
     ensureTemplate('{{series_code}}{{contact_form}}{{coil_voltage_vdc|pad=2}}{{suffix}}');
   }
 
   if (family === 'relay_signal') {
     addVariantKeys(['coil_voltage_vdc', 'contact_arrangement', 'contact_form', 'suffix']);
     ensureTemplate('{{series}}{{contact_arrangement|upper|alnum}}{{coil_voltage_vdc|digits|pad=2}}{{suffix|upper}}');
   }
 
   const variantKeys = Array.from(forcedVariantKeys);
   blueprint.variant_keys = variantKeys;
   ingestOptions.variant_keys = variantKeys;
   blueprint.ingestOptions = ingestOptions;
 
   const allowed = Array.isArray(blueprint.allowedKeys) ? blueprint.allowedKeys : [];
-  blueprint.allowedKeys = Array.from(new Set([...allowed, ...variantKeys]));
+  const generic = [
+    'pn_jp',
+    'pn_aliases',
+    'ordering_market',
+    'coil_voltage_vac',
+    'terminal_form',
+    'contact_rating_text',
+    'dielectric_strength_v',
+    'operate_time_ms',
+    'release_time_ms',
+    'coil_resistance_ohm',
+    'insulation_resistance_mohm',
+    'dim_l_mm',
+    'dim_w_mm',
+    'dim_h_mm',
+  ];
+  blueprint.allowedKeys = Array.from(new Set([...allowed, ...variantKeys, ...generic]));
 
   if (registryRow?.specs_table && !blueprint.specsTable) {
     blueprint.specsTable = registryRow.specs_table;
   }
 
   return blueprint;
 }
 
 function normalizeBlueprint(row, registryRow) {
   if (!row) return null;
   const fields = row.fields_json || row.fields || {};
   const ingestOptionsRaw = row.ingest_options || row.ingestOptions || {};
   const ingestOptions = ingestOptionsRaw && typeof ingestOptionsRaw === 'object'
     ? { ...ingestOptionsRaw }
     : {};
   const codeRules = row.code_rules || row.codeRules || null;
   const allowedKeys = deriveAllowedKeys(fields, ingestOptionsRaw);
   let variantKeys = deriveVariantKeys(row);
   const specsTable = registryRow?.specs_table || registryRow?.specsTable || `${row.family_slug}_specs`;
 
   if (Array.isArray(ingestOptions.variant_keys)) {
     ingestOptions.variant_keys = normalizeKeyList(ingestOptions.variant_keys);
   }
 
   variantKeys = Array.isArray(variantKeys) ? variantKeys : [];