diff --git a/src/pipeline/variant-keys.js b/src/pipeline/variant-keys.js
index 5927de202d5ed6452eab2456cfb0055db6fe4b7e..f4d5fcbf777420508f46ff7904535d1d7ff6c2ec 100644
--- a/src/pipeline/variant-keys.js
+++ b/src/pipeline/variant-keys.js
@@ -586,43 +586,48 @@ async function inferVariantKeys({ family, brand, series, blueprint, extracted })
   const known = new Set();
   const blueprintKeys = Array.isArray(blueprint?.ingestOptions?.variant_keys)
     ? blueprint.ingestOptions.variant_keys
     : Array.isArray(blueprint?.variant_keys)
       ? blueprint.variant_keys
       : [];
   for (const key of blueprintKeys || []) {
     const norm = normalizeKeyName(key);
     if (norm) known.add(norm);
   }
   for (const key of keySet || []) {
     if (key) known.add(key);
   }
 
   const normalizedFromExtraction = Array.from(detectedSet)
     .map(normalizeKeyName)
     .filter(Boolean);
   const deduped = [];
   const seen = new Set();
   for (const key of normalizedFromExtraction) {
     if (seen.has(key)) continue;
     seen.add(key);
     deduped.push(key);
   }
 
+  const existingKeys = new Set([
+    ...known,
+    ...deduped,
+  ]);
+
   const discovery = await discoverVariantKeys({
     family,
     brand,
     series,
-    existingKeys: new Set([...known, ...deduped]),
+    existingKeys,
   });
 
   const finalSet = new Set(deduped);
   for (const key of discovery.detected || []) {
     if (key) finalSet.add(key);
   }
 
   const newKeys = Array.from(finalSet).filter((key) => !known.has(key));
 
   return { detected: Array.from(finalSet), newKeys, details: discovery.stats };
 }
 
 module.exports = { inferVariantKeys, normalizeSlug };
