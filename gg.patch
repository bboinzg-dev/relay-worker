diff --git a/server.js b/server.js
index 0eb27e19c130c0639c0426adcf034269aed4aaa0..ed8779d790aa7e120f289a19f3dd52a0bc140c52 100644
--- a/server.js
+++ b/server.js
@@ -270,50 +270,52 @@ try {
   } else if (typeof ai === 'function') {
     // 만약 server.ai.js 가 (app)=>{ app.post('/api/ai/resolve', ...) } 로 export 한다면
     ai(app);
     console.log('[BOOT] mounted AI routes via function(export)');
   } else {
     console.warn('[BOOT] server.ai export type not supported:', typeof ai);
   }
 } catch (e) {
   console.error('[BOOT] ai mount failed', e?.message || e);
   // 🔰 Fallback: server.ai.js 로딩 실패/누락 시에도 즉시 동작하도록 최소 라우트 제공
   const express = require('express');
   const fb = express.Router();
   fb.get('/ai/ping', (_req, res) => res.json({ ok: true, fallback: true }));
   fb.get('/ai/resolve', (req, res) => res.json({ ok: true, echo: String(req.query?.q || '') }));
   fb.post('/ai/resolve', (req, res) => res.json({ ok: true, echo: String((req.body && req.body.q) || '') }));
   app.use('/api', fb);
   console.warn('[BOOT] fallback AI routes mounted at /api/*');
 }
 
 /* ---------------- Mount modular routers (after global middleware) ---------------- */
 try { app.use(require('./server.optimize')); console.log('[BOOT] mounted /api/optimize/*'); } catch {}
 try { app.use(require('./server.checkout')); console.log('[BOOT] mounted /api/checkout/*'); } catch {}
 try { app.use(require('./server.bom'));      console.log('[BOOT] mounted /api/bom/*'); } catch {}
 try { app.use(require('./server.notify'));   console.log('[BOOT] mounted /api/notify/*'); } catch {}
 try { app.use(require('./server.market'));   console.log('[BOOT] mounted /api/listings, /api/purchase-requests, /api/bids'); } catch {}
+try { app.use(require('./server.retail'));   console.log('[BOOT] mounted /api/retail/export-catalog'); } catch {}
+try { app.use(require('./server.retail.import')); console.log('[BOOT] mounted /api/retail/import'); } catch {}
 try { app.use(require('./src/routes/vision.upload')); console.log('[BOOT] mounted /api/vision/guess (upload)'); } catch {}
 try { app.use(require('./server.ingest.status')); console.log('[BOOT] mounted /api/ingest/:id'); } catch {}
 
 // 인라인 AI 라우터(간소 버전)는 제거 — server.ai.js 하나만 유지
 
 /* NOTE: The parts router already exists in your repo; keep it mounted. */
 try { app.use('/api/parts', require('./src/routes/parts')); } catch {}
 
 // ✅ ALWAYS-ON 디버그 엔드포인트 (환경변수와 무관하게 항상 열림)
 app.get('/_routes', (req, res) => {
   try {
     const list = [];
     app._router.stack.forEach((m) => {
       if (m.route && m.route.path) {
         const methods = Object.keys(m.route.methods).join(',').toUpperCase();
         list.push(`${methods.padEnd(6)} ${m.route.path}`);
       } else if (m.name === 'router' && m.handle?.stack) {
         m.handle.stack.forEach((h) => {
           const p = h.route?.path;
           const ms = h.route ? Object.keys(h.route.methods).join(',').toUpperCase() : '';
           if (p) list.push(`${ms.padEnd(6)} ${m.regexp?.toString() || ''}${p}`);
         });
       }
     });
     res.type('text/plain').send(list.join('\n') || 'no-routes');
