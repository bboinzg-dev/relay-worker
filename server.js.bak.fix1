const express = require('express');
const { Pool } = require('pg');

const app = express();
app.use(express.json({ limit: '10mb' }));

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
});

app.get('/_healthz', (_req, res) => res.status(200).send('ok'));

app.post('/api/worker/ingest', async (req, res) => {
  try {
    const { gcsPdfUri } = req.body || {};
    if (!gcsPdfUri) return res.status(400).json({ ok:false, error:'gcsPdfUri required' });

    // 임시: 최소 기록만 남김 (DocAI 연동은 이후 단계에서 추가)
    await pool.query(
      `INSERT INTO public.relay_specs (gcs_pdf_uri, status, created_at, updated_at)
       VALUES ($1, 'RECEIVED', now(), now())`,
      [gcsPdfUri]
    );

    return res.json({ ok:true, accepted:true });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok:false, error: e.message || String(e) });
  }
});

const port = process.env.PORT || 8080;
app.listen(port, () => console.log('worker-src up on', port));
// ------------------------------
// /parts/detail (and /api/parts/detail)
// Query: brand, code
// ------------------------------
const pgPool = global.pgPool || (global.pgPool = new (require('pg').Pool)({
  connectionString: process.env.DATABASE_URL,
  max: 5,
}));

async function fetchRelayDetail(brand, code) {
  const client = await pgPool.connect();
  try {
    const sql = `
      SELECT brand, code, series, display_name, family_slug, contact_form,
             coil_voltage_vdc, contact_rating_text,
             dim_l_mm, dim_w_mm, dim_h_mm,
             datasheet_url, cover
      FROM public.relay_specs
      WHERE lower(brand)=lower($1) AND lower(code)=lower($2)
      LIMIT 1
    `;
    const { rows } = await client.query(sql, [brand, code]);
    return rows[0] || null;
  } finally {
    client.release();
  }
}

function withFallbackUrls(row) {
  if (!row) return null;
  const bucket = process.env.GCS_BUCKET;
  const safeBrand = String(row.brand || '').toLowerCase();
  const safeCode  = String(row.code  || '').toLowerCase();
  if (!row.cover && bucket) {
    row.cover = `https://storage.googleapis.com/${bucket}/images/${safeBrand}/${safeCode}/cover.png`;
  }
  if (!row.datasheet_url && bucket) {
    row.datasheet_url = `https://storage.googleapis.com/${bucket}/datasheets/${safeCode}.pdf`;
  }
  return row;
}

const detailHandler = async (req, res) => {
  const brand = (req.query.brand || '').toString().trim();
  const code  = (req.query.code  || '').toString().trim();
  if (!brand || !code) return res.status(400).json({ error: 'brand and code are required' });
  try {
    const row = await fetchRelayDetail(brand, code);
    if (!row) return res.status(404).json({ error: 'not found' });
    res.set('Cache-Control', 'public, max-age=60');
    return res.json(withFallbackUrls(row));
  } catch (err) {
    console.error('detail error', err);
    return res.status(500).json({ error: 'internal' });
  }
};

app.get('/parts/detail', detailHandler);
app.get('/api/parts/detail', detailHandler);
