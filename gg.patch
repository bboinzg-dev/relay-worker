 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/routes/files.js b/src/routes/files.js
index 42b3a2dcb05d06dbcc74a6bd2a92ee91f361fab7..a7a47553e69cef745d0e90b2fd9f5f789f9f3e6c 100644
--- a/src/routes/files.js
+++ b/src/routes/files.js
@@ -57,51 +57,51 @@ router.post('/upload', upload.single('file'), async (req, res) => {
     });
 
     const gcsUri = `gs://${BUCKET}/${objectName}`;
 
     // 2) 파라미터 정리
     const payload = {
       gcsUri,
       filename: originalName,
       family_slug: req.body.family_slug || null,
       brand: req.body.brand || null,
       code: req.body.code || null,
       series: req.body.series || null,
       display_name: req.body.display_name || null,
     };
 
     // 3) Cloud Tasks가 설정되어 있으면 enq, 아니면 즉시 분석
     const queue = process.env.QUEUE_NAME;
     const location = process.env.TASKS_LOCATION;
     const workerUrl = process.env.WORKER_TASK_URL; // e.g. https://worker-xxxx.run.app/api/worker/ingest
     const invokerSA = process.env.TASKS_INVOKER_SA;
 
     if (queue && location && workerUrl) {
       const client = new CloudTasksClient();
       const parent = client.queuePath(process.env.GCP_PROJECT_ID || process.env.GOOGLE_CLOUD_PROJECT, location, queue);
 
-      const task = {
-        httpRequest: {
-          httpMethod: 'POST',
-          url: workerUrl,
-          headers: { 'Content-Type': 'application/json' },
-          body: Buffer.from(JSON.stringify(payload)).toString('base64'),
-        },
+      const body = Buffer.from(JSON.stringify(payload));
+      const httpRequest = {
+        url: workerUrl,
+        httpMethod: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body,
       };
+      const task = { httpRequest };
       if (invokerSA) {
         task.httpRequest.oidcToken = { serviceAccountEmail: invokerSA, audience: workerUrl };
       }
 
       const [resp] = await client.createTask({ parent, task });
       return res.json({ ok: true, gcsUri, enqueued: true, task: resp.name });
     }
 
     // fallback: 즉시 실행
     const result = await runAutoIngest(payload);
     return res.json({ ok: true, gcsUri, enqueued: false, result });
   } catch (e) {
     console.error(e);
     res.status(400).json({ ok: false, error: String(e.message || e) });
   }
 });
 
 module.exports = router;
 
EOF
)