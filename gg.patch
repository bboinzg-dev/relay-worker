diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index b67f31870b72a03c19ba5a110bb13b4813aa525f..3ac687395fe852110a3dfa738edd5e5fc69bb5fd 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -723,51 +723,51 @@ async function saveExtractedSpecs(targetTable, familySlug, rows = [], options =
         result.skipped.push({ reason: 'invalid_code', code: skippedCode, last_error: 'invalid_code' });
         continue;
       }
 
       rec.pn = pnValue;
       if (rec.code == null || String(rec.code).trim() === '') {
         rec.code = pnValue;
       }
 
       const pnNorm = normKey(pnValue);
       if (!pnNorm) {
         if (physicalCols.has('last_error')) rec.last_error = 'missing_pn';
         result.skipped.push({ reason: 'missing_pn', last_error: 'missing_pn' });
         continue;
       }
       if (physicalCols.has('pn_norm')) rec.pn_norm = pnNorm;
 
       const codeNorm = normKey(rec.code);
       if (!codeNorm) {
         if (physicalCols.has('last_error')) rec.last_error = 'invalid_code';
         result.skipped.push({ reason: 'invalid_code', last_error: 'invalid_code' });
         continue;
       }
       rec.code_norm = codeNorm;
 
-      const naturalKey = `${rec.brand_norm ?? ''}::${pnNorm}`;
+      const naturalKey = `${rec.brand_norm ?? ''}::${rec.pn_norm ?? pnNorm ?? normKey(rec.pn)}`;
       if (seenNatural.has(naturalKey)) {
         result.skipped.push({ reason: 'duplicate_code' });
         continue;
       }
       seenNatural.add(naturalKey);
 
       rec.family_slug = familySlug;
 
       const display = rec.display_name || `${rec.brand} ${rec.pn}`;
       rec.display_name = display;
       if (rec.displayname == null) rec.displayname = display;
 
       let rawJson = {};
       if (rec.raw_json && typeof rec.raw_json === 'object' && !Array.isArray(rec.raw_json)) {
         rawJson = { ...rec.raw_json };
       } else if (typeof rec.raw_json === 'string') {
         try {
           const parsed = JSON.parse(rec.raw_json);
           if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) rawJson = parsed;
         } catch (_) {}
       }
 
       const sanitized = {};
       for (const col of colList) {
         if (col === 'raw_json') continue;
