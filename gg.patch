diff --git a/server.js b/server.js
index b620778fbddac570590bf8779481031a99fe40db..0eb27e19c130c0639c0426adcf034269aed4aaa0 100644
--- a/server.js
+++ b/server.js
@@ -758,51 +758,51 @@ async function markSucceeded({ runId, taskName, retryCount, result, gcsUri, dura
       `UPDATE public.ingest_run_logs
           SET finished_at = now(),
               duration_ms = $2,
               status = 'SUCCEEDED',
               task_name = $3,
               retry_count = $4,
               final_table = $5,
               final_family = $6,
               final_brand = $7,
               final_code  = $8,
               final_datasheet = $9,
               error_message = NULL
         WHERE id = $1`,
       [ runId, ms, taskName || null, safeRetryCount,
         result?.specs_table || null,
         family,
         brand,
         code,
         datasheet ]
     );
   } catch (err) {
     console.error('[ingest markSucceeded]', err?.message || err);
   }
 }
 
-app.post('/api/worker/ingest', requireSession, async (req, res) => {
+async function handleWorkerIngest(req, res) {
   const rawBody = (req.body && typeof req.body === 'object') ? req.body : {};
   const payload = rawBody.fromTasks && rawBody.payload && typeof rawBody.payload === 'object'
     ? rawBody.payload
     : rawBody;
 
   const phaseInput = String(payload.phase || rawBody.phase || 'start').toLowerCase();
   const knownPhases = new Set(['start', 'process', 'persist']);
   const phase = knownPhases.has(phaseInput) ? phaseInput : 'start';
   const runId = pickFirstString(payload.runId, payload.run_id, rawBody.runId, rawBody.run_id) || generateRunId();
   const gcsUri = pickFirstString(
     payload.gcsUri,
     payload.gcs_uri,
     payload.gsUri,
     payload.gcsPdfUri,
     payload.gcs_pdf_uri,
     payload.uri,
     payload.url,
     rawBody.gcsUri,
     rawBody.gcs_uri,
     rawBody.gsUri,
     rawBody.gcsPdfUri,
     rawBody.uri,
     rawBody.url
   );
 
diff --git a/server.js b/server.js
index b620778fbddac570590bf8779481031a99fe40db..0eb27e19c130c0639c0426adcf034269aed4aaa0 100644
--- a/server.js
+++ b/server.js
@@ -948,51 +948,59 @@ app.post('/api/worker/ingest', requireSession, async (req, res) => {
         await markSucceeded({
           ...baseContext,
           result: out,
           gcsUri,
           durationMs: out?.ms ?? (Date.now() - startedAt),
           meta: payload,
         });
         return;
       }
 
       console.warn('[ingest] unknown phase', { phase, runId, taskName });
       await markFailed({ ...baseContext, error: 'unknown_phase', durationMs: Date.now() - startedAt });
     } catch (err) {
       console.error('[ingest async error]', err?.message || err);
       try {
         await markFailed({
           ...baseContext,
           error: err?.message || err,
           durationMs: Date.now() - startedAt,
         });
       } catch (innerErr) {
         console.error('[ingest async error][markFailed]', innerErr?.message || innerErr);
       }
     }
   });
-});
+}
+
+app.post([
+  '/api/worker/ingest',
+  '/worker/ingest',
+],
+bodyParser.json({ limit: '25mb' }),
+requireSession,
+handleWorkerIngest);
 
 async function seedManufacturerAliases() {
   try {
     const { rows } = await db.query(
       `SELECT lower(column_name) AS column
          FROM information_schema.columns
         WHERE table_schema = 'public' AND table_name = 'manufacturer_alias'`
     );
     const available = new Set(rows.map((r) => r.column));
     if (!available.has('brand') || !available.has('alias')) return;
 
     const seeds = [
       { brand: 'Panasonic', alias: 'Matsushita' },
       { brand: 'OMRON', alias: 'Omron Corporation' },
       { brand: 'TE Connectivity', alias: 'Tyco Electronics' },
       { brand: 'Finder', alias: 'Finder Relays' },
       { brand: 'Schneider Electric', alias: 'Square D' },
     ];
 
     for (const { brand, alias } of seeds) {
       const brandNorm = brand.toLowerCase();
       await db.query(
         `INSERT INTO public.manufacturer_alias (brand, alias, brand_norm)
          VALUES ($1,$2,$3)
          ON CONFLICT DO NOTHING`,
