diff --git a/server.js b/server.js
index 3c770444f76bb50d73d8a6c015fb73c8784e88c8..2c32e158cab5a7abdfcf613ae04cae9944c94b37 100644
--- a/server.js
+++ b/server.js
@@ -33,64 +33,64 @@ const { generateRunId } = require('./src/utils/run-id');
  let _queuePath = null;
  function getTasks() {
    if (!_tasks) {
     // 글로벌 엔드포인트 + REST fallback(HTTP/1)
     _tasks = new CloudTasksClient({ fallback: true });
      _queuePath = _tasks.queuePath(PROJECT_ID, TASKS_LOCATION, QUEUE_NAME);
    }
    return { tasks: _tasks, queuePath: _queuePath };
  }
 
 async function enqueueWorkerStep(payload = {}) {
   const { tasks, queuePath } = getTasks();
   if (!TASKS_INVOKER_SA) throw new Error('TASKS_INVOKER_SA not set');
   const audience = process.env.WORKER_AUDIENCE || new URL(WORKER_STEP_URL).origin;
 
   const bodyPayload = { ...payload };
   const runId = bodyPayload.runId || bodyPayload.run_id || generateRunId();
   bodyPayload.runId = runId;
   bodyPayload.run_id = runId;
 
   const body = Buffer.from(JSON.stringify(bodyPayload)).toString('base64');
   const dispatchDeadline = process.env.TASKS_DISPATCH_DEADLINE || '150s';
   const scheduleDelaySeconds = Number.isFinite(Number(process.env.TASKS_SCHEDULE_DELAY_SECONDS))
     ? Math.max(0, Number(process.env.TASKS_SCHEDULE_DELAY_SECONDS))
     : 5;
-  const scheduledSeconds = Math.floor(Date.now() / 1000) + scheduleDelaySeconds;
+  const scheduledSeconds = Math.floor(Date.now() / 1000) + Math.max(scheduleDelaySeconds, 5);
 
   const task = {
     httpRequest: {
       httpMethod: 'POST',
       url: WORKER_STEP_URL,
       headers: { 'Content-Type': 'application/json' },
       body,
       ...(TASKS_INVOKER_SA
         ? { oidcToken: { serviceAccountEmail: TASKS_INVOKER_SA, audience } }
         : {}),
     },
     dispatchDeadline,
-    scheduleTime: { seconds: scheduledSeconds },
+    scheduleTime: { seconds: scheduledSeconds }, // cold start buffer
     retryConfig: {
       maxAttempts: 12,
       minBackoff: { seconds: 1 },
       maxBackoff: { seconds: 60 },
       maxDoublings: 4,
     },
   };
 
   // (선택) 10초로 RPC 타임아웃 단축 — 실패 시 바로 catch → DB만 FAILED 마킹
   await tasks.createTask({ parent: queuePath, task }, { timeout: 10000 });
   return runId;
 }
 
 
 const app = express();
 
 app.use(bodyParser.json({ limit: '25mb' }));
 app.use(bodyParser.urlencoded({ extended: true }));
 app.disable('x-powered-by');
 
 /* ---------------- Env / Config ---------------- */
 const PORT = process.env.PORT || 8080;
 const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';
 
 function parseCorsOrigins(envStr) {
