diff --git a/src/utils/vertex.js b/src/utils/vertex.js
index f1c4e72868b52c1de96cc521e371d6fdd5d3d343..ff7c98878e9b55fcca15026fdf9862826ac77655 100644
--- a/src/utils/vertex.js
+++ b/src/utils/vertex.js
@@ -1,38 +1,60 @@
 'use strict';
 
 const { VertexAI } = require('@google-cloud/vertexai');
 const { safeJsonParse } = require('./safe-json');
-const env = require('../config/env');
 
-const DEFAULT_MODEL_ID = env.GEMINI_MODEL_EXTRACT || env.VERTEX_MODEL_ID;
+let envConfig = null;
+let envLoadError = null;
+try {
+  envConfig = require('../config/env');
+} catch (err) {
+  envLoadError = err;
+  console.warn('[vertex] config env unavailable:', err?.message || err);
+}
+
+const PROJECT_ID = envConfig?.PROJECT_ID
+  || process.env.GCP_PROJECT_ID
+  || process.env.GOOGLE_CLOUD_PROJECT
+  || null;
+const LOCATION = envConfig?.VERTEX_LOCATION || process.env.VERTEX_LOCATION || 'asia-northeast3';
+const DEFAULT_MODEL_ID = envConfig?.GEMINI_MODEL_EXTRACT
+  || envConfig?.VERTEX_MODEL_ID
+  || process.env.GEMINI_MODEL_EXTRACT
+  || process.env.VERTEX_MODEL_ID
+  || 'gemini-2.5-flash';
 
 let vertexInstance;
 
 function getVertex() {
+  if (!PROJECT_ID) {
+    const err = new Error('VERTEX_PROJECT_ID_MISSING');
+    if (envLoadError) err.cause = envLoadError;
+    throw err;
+  }
   if (!vertexInstance) {
-    vertexInstance = new VertexAI({ project: env.PROJECT_ID, location: env.VERTEX_LOCATION });
+    vertexInstance = new VertexAI({ project: PROJECT_ID, location: LOCATION });
   }
   return vertexInstance;
 }
 
 // Vertex는 "role: system" 메시지를 허용하지 않는다 → systemInstruction 사용
 function getModel(systemText, modelId = DEFAULT_MODEL_ID) {
   const cfg = { model: modelId };
   if (systemText && String(systemText).trim()) {
     cfg.systemInstruction = { parts: [{ text: String(systemText) }] };
   }
   return getVertex().getGenerativeModel(cfg);
 }
 
 async function callModelJson(systemText, userText, { modelId, maxOutputTokens = 4096, temperature = 0.2, topP = 0.8 } = {}) {
   const model = getModel(systemText, modelId);
   const req = {
     contents: [{ role: 'user', parts: [{ text: String(userText || '') }]}],
     generationConfig: {
       responseMimeType: 'application/json',
       temperature,
       topP,
       maxOutputTokens,
     },
   };
   const resp = await model.generateContent(req);