diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index c45fd70fa5e4363e7fc17275560aba80603274c5..4c176e13cbac050b609e4d91e30bcd7be4338ce4 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -100,51 +100,56 @@ async function saveExtractedSpecs(familySlug, base, specs) {
     ? computeFastKeys(blueprint).map((k) => String(k || '').trim().toLowerCase()).filter(Boolean)
     : allowedKeys;
   const allowedSet = new Set(allowedKeys);
   const fastSet = new Set(fastKeys);
   const specsNorm = {};
   for (const [rawKey, value] of Object.entries(specs || {})) {
     const key = String(rawKey || '')
       .trim()
       .toLowerCase()
       .replace(/[^a-z0-9_]/g, '');
     if (!key || RESERVED.has(key)) continue;
     if (allowedSet.size && !allowedSet.has(key)) continue;
     if (FAST && fastSet.size && !fastSet.has(key)) continue;
     if (!Object.prototype.hasOwnProperty.call(specsNorm, key)) {
       specsNorm[key] = coerceByType(key, value); // 타입 강제정규화
     }
   }
 
   for (const key of Object.keys(specsNorm)) {
     const t = dbColTypes.get(key);
     if (t === 'numeric' || t === 'int') {
       specsNorm[key] = toNumberOrNull(specsNorm[key]);
     }
   }
 
-  const specCols = Object.keys(specsNorm);
+  // 실제 테이블 컬럼만 남기고, 메타 키(옵션/설정)는 제외
+  const physicalCols = new Set(dbColTypes.keys());
+  const META = new Set(['variant_keys','pn_template','ingest_options']);
+  const specCols = Object.keys(specsNorm)
+    .map((s) => s.toLowerCase())
+    .filter((s) => physicalCols.has(s) && !META.has(s));
   const allCols = baseCols.concat(specCols);
   const params = allCols.map((_, i) => `$${i + 1}`);
   const values = baseVals.concat(specCols.map((k) => {
     const x = specsNorm[k];
     if (typeof x === 'string' && /to|,|\d/.test(x)) {
       const n = toNumberOrNull(x);
       return n ?? null;
     }
     return x;
   }));
 
   const colList = allCols.map(safeColumnName).join(',');
   const setList = specCols
     .map((k) => `${safeColumnName(k)} = EXCLUDED.${safeColumnName(k)}`)
     .join(',');
 
   const sql = `
     INSERT INTO ${targetTable} (${colList})
     VALUES (${params.join(',')})
     ON CONFLICT (brand_norm, code_norm)
     DO UPDATE SET
       mfr_full = EXCLUDED.mfr_full,
       datasheet_uri = EXCLUDED.datasheet_uri,
       verified_in_doc = EXCLUDED.verified_in_doc
       ${setList ? ',' + setList : ''}
