diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index c76abc5ace2c126831328618f10797d200c85186..fde958740fa64bca0e94488519d09877f969801a 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -1045,50 +1045,53 @@ function shouldInsert(row, { coreSpecKeys, candidateSpecKeys } = {}) {
       } else {
         row.last_error = 'invalid_code';
         return { ok: false, reason: 'invalid_code' };
       }
     } else {
       row.last_error = 'invalid_code';
       return { ok: false, reason: 'invalid_code' };
     }
   } else {
     if (FORBIDDEN_RE.test(pn) || BANNED_PREFIX.test(pn) || BANNED_EXACT.test(pn)) {
       const fixed = repairPn(pn);
       if (fixed && isValidCode(fixed) && !FORBIDDEN_RE.test(fixed) && !BANNED_PREFIX.test(fixed) && !BANNED_EXACT.test(fixed)) {
         console.warn('[persist] pn repaired', { original: pn, fixed });
         row.last_error = row.last_error || 'invalid_code_fixed';
         pn = fixed;
       } else {
         row.last_error = 'invalid_code';
         return { ok: false, reason: 'invalid_code' };
       }
     }
   }
   row.pn = pn;
   if (row.code == null || String(row.code).trim() === '') row.code = pn;
   const hasCore = hasCoreSpec(row, coreSpecKeys, candidateSpecKeys);
   if (!hasCore) {
+    if (docType === 'ordering' || allowMinimal) {
+      return { ok: true };
+    }
     row.last_error = row.last_error || 'missing_core_spec';
     return { ok: false, reason: 'missing_core_spec' };
   }
   return { ok: true };
 }
 
 async function getColumnTypes(targetTable) {
   const [schema, table] = targetTable.includes('.')
     ? targetTable.split('.', 2)
     : ['public', targetTable];
 
   const { rows } = await pool.query(
     `SELECT lower(column_name) AS column, data_type
        FROM information_schema.columns
       WHERE table_schema = $1
         AND table_name   = $2`,
     [schema, table],
   );
 
   const map = new Map();
   for (const row of rows) {
     map.set(row.column, String(row.data_type || '').toLowerCase());
   }
   return map;
 }