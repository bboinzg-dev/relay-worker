diff --git a/server.ai.js b/server.ai.js
index 8d473cf168ea1776fddecd01d93acf2faebbb2ac..c2cfc71a987fa9b2034d8a3ebdea03f40153df73 100644
--- a/server.ai.js
+++ b/server.ai.js
@@ -145,50 +145,52 @@ function buildFilterSQL({ table, family, plan, limit }) {
       ${where.length ? 'WHERE ' + where.join(' AND ') : ''}
       ORDER BY updated_at DESC
       LIMIT ${Math.min(Math.max(parseInt(limit,10)||24, 1), 100)}`;
 
   return { sql, args };
 }
 
 /* ---------- /api/ai/resolve : 브랜드/PN 추출 ---------- */
 router.get('/resolve', async (req, res) => {
   try {
     const q = String(req.query?.q || req.body?.q || '').trim();
     if (!q) return res.status(400).json({ ok:false, error:'q required' });
 
     // 간단 규칙 우선
     const simple = /([A-Za-z][A-Za-z0-9.+-]+)\s+([A-Za-z0-9][A-Za-z0-9.+-]+)/.exec(q);
     if (simple) {
       const [, brand, code] = simple;
       return res.json({ ok:true, brand, code, source:'simple' });
     }
 
     // LLM로 추출 → brand_like / pn_like로 반환
     const plan = await callGeminiToPlan(q);
     if (plan.brand_like || plan.pn_like) {
       return res.json({ ok:true, brand: plan.brand_like || null, code: plan.pn_like || null, source:'ai' });
     }
+
+    return res.json({ ok: true, echo: q });
   } catch (e) {
     return res.status(500).json({ ok:false, error:String(e?.message||e) });
   }
 });
 
 /* ---------- /api/ai/search : AI/PN 검색 ---------- */
 // e.g. GET /api/ai/search?q=컨택트 정격 20A 릴레이&mode=ai
 router.get('/search', async (req, res) => {
   try {
     const q = String(req.query?.q || '').trim();
     const mode = String(req.query?.mode || 'ai');
     const limit = String(req.query?.limit || '24');
     if (!q) return res.status(400).json({ ok:false, error:'q required' });
 
     // 1) pn 간단 검색 모드
     if (mode === 'pn') {
       const rows = await db.query(
         `SELECT id, family_slug, brand, pn,
                 COALESCE(NULLIF(brand,''),'') || CASE WHEN COALESCE(NULLIF(pn,''),'')<>'' THEN ' '||pn ELSE '' END AS title,
                 image_uri, datasheet_url, series, updated_at
            FROM public.component_specs
           WHERE unaccent(brand) ILIKE unaccent('%' || $1 || '%')
              OR unaccent(pn)    ILIKE unaccent('%' || $1 || '%')
           ORDER BY updated_at DESC
           LIMIT ${Math.min(Math.max(parseInt(limit,10)||24, 1), 100)}`,