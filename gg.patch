diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index c0455b9588c6e254c9f2fd77c605e5c7056e25a6..5ea6050cfe3d61524c54f9298b4ad16f89e668d8 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -1299,51 +1299,51 @@ async function doIngestPipeline(input = {}, runIdParam = null) {
   // 블루프린트 허용 키
   let allowedKeys = Array.isArray(blueprint?.allowedKeys)
     ? [...blueprint.allowedKeys]
     : [];
   if ((!allowedKeys || !allowedKeys.length) && blueprint?.fields && typeof blueprint.fields === 'object') {
     allowedKeys = Object.keys(blueprint.fields);
   }
   allowedKeys = Array.from(
     new Set(
       (allowedKeys || [])
         .map((k) => String(k || '').trim())
         .filter(Boolean)
     )
   );
 
   let variantKeys = [];
   if (USE_VARIANT_KEYS) {
     variantKeys = Array.isArray(blueprint?.ingestOptions?.variant_keys)
       ? blueprint.ingestOptions.variant_keys
       : (Array.isArray(blueprint?.variant_keys) ? blueprint.variant_keys : []);
     variantKeys = variantKeys
       .map((k) => String(k || '').trim().toLowerCase())
       .filter(Boolean);
   }
 
-  const pnTemplate = USE_PN_TEMPLATE
+  let pnTemplate = USE_PN_TEMPLATE
     ? (blueprint?.ingestOptions?.pn_template || blueprint?.ingestOptions?.pnTemplate || null)
     : null;
   const requiredFields = [];
   if (blueprint?.fields && typeof blueprint.fields === 'object') {
     for (const [fieldKey, meta] of Object.entries(blueprint.fields)) {
       const isRequired = meta && typeof meta === 'object' && Boolean(meta.required);
       if (!isRequired) continue;
       const normalized = String(fieldKey || '')
         .trim()
         .toLowerCase()
         .replace(/[^a-z0-9_]/g, '');
       if (normalized && !requiredFields.includes(normalized)) {
         requiredFields.push(normalized);
       }
     }
   }
 
   let colTypes;
   const disableEnsure = /^(1|true|on)$/i.test(process.env.NO_SCHEMA_ENSURE || '0');
 
   // -------- 공용 강제정규화 유틸 --------
 
   if (code && !/\d/.test(String(code))) {
     // "AGN","TQ" 처럼 숫자 없는 시리즈는 series로 넘기고 code는 비움
     series = code; code = null;
diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index c0455b9588c6e254c9f2fd77c605e5c7056e25a6..5ea6050cfe3d61524c54f9298b4ad16f89e668d8 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -2257,50 +2257,70 @@ async function doIngestPipeline(input = {}, runIdParam = null) {
         display_name: `${brandName} ${cand.raw}`,
         verified_in_doc: verified,
         updated_at: now,
       };
       if (coverUri) rec.cover = coverUri;
       if (hasRuntimeMeta) {
         rec.raw_json = mergeRuntimeMetadata(rec.raw_json, runtimeMeta);
       }
       if (physicalCols.has('series') && fallbackSeries != null) rec.series = fallbackSeries;
       rec.datasheet_url = pickDatasheetUrl(null, rec.datasheet_uri);
       if (rec.display_name != null && rec.displayname == null) rec.displayname = rec.display_name;
       records.push(rec);
     }
   }
 
   console.log('[MPNDBG]', {
     picks: candidateMap.length,
     vkeys: Array.isArray(blueprint?.ingestOptions?.variant_keys) ? blueprint.ingestOptions.variant_keys : [],
     vkeys_runtime: runtimeVariantKeys,
     brand_source: brandSource,
     expanded: explodedRows.length,
     recs: records.length,
     colsSanitized: colTypes?.size || 0,
   });
 
+  // 추출/가공 끝난 직후 시점에…
+  // 2-1) PN 템플릿이 없으면 문서에서 자동 유도 → recipe에 저장하고 이번 런에도 즉시 사용
+  try {
+    if (USE_PN_TEMPLATE && !pnTemplate) {
+      const fullText = await readText(gcsUri, 300 * 1024);
+      const { learnPnTemplate, upsertExtractionRecipe } = require('./pn-grammar');
+      const tpl = await learnPnTemplate({
+        family,
+        brand: brand || extracted.brand,
+        series,
+        docText: fullText,
+        rows: Array.isArray(records) && records.length ? records : extracted.rows,
+      });
+      if (tpl) {
+        await upsertExtractionRecipe({ family, brand: brand || extracted.brand, series, pnTemplate: tpl });
+        pnTemplate = tpl; // 이번 런에 바로 적용
+      }
+    }
+  } catch (e) { console.warn('[pn-learn] skipped:', e?.message || e); }
+
   const processedPayload = {
     started,
     gcsUri,
     family,
     table,
     qualified,
     pnTemplate,
     requiredFields,
     coverUri,
     records,
     rows: records,
     mpnList: Array.isArray(extracted?.mpn_list) ? extracted.mpn_list : [],
     extractedBrand: extracted?.brand || null,
     brandName,
     baseSeries,
     runId,
     run_id: runId,
     jobId,
     job_id: jobId,
     text: extractedText,
     brand: brandEffectiveResolved || extracted?.brand || null,
     brand_detected: detectedBrand || null,
     brand_effective: brandEffectiveResolved || null,
     brand_source: brandSource || null,
     variant_keys_runtime: runtimeVariantKeys,
