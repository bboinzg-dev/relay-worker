diff --git a/server.js b/server.js
index 26ecdde1713a14c453f30d0bc04f692b0454e5d6..a2cae8edc13afca520c9ec21f59e18ce86251fb7 100644
--- a/server.js
+++ b/server.js
@@ -118,66 +118,68 @@ let _tasks = null;
 let _queuePath = null;
 function getTasks() {
   if (!_tasks) {
     if (!CloudTasksClient) throw new Error('@google-cloud/tasks unavailable');
     // 지역 엔드포인트 + REST fallback(HTTP/1)
     _tasks = new CloudTasksClient({
       fallback: true,
     });
     _queuePath = _tasks.queuePath(PROJECT_ID, TASKS_LOCATION, QUEUE_NAME);
   }
   return { tasks: _tasks, queuePath: _queuePath };
 }
 
 async function enqueueIngestTask(payload = {}) {
   const { tasks, queuePath } = getTasks();
   if (!TASKS_INVOKER_SA) throw new Error('TASKS_INVOKER_SA not set');
   const audience = process.env.WORKER_AUDIENCE || new URL(WORKER_TASK_URL).origin;
 
   const bodyPayload = {
     fromTasks: true,
     payload,
   };
   const body = Buffer.from(JSON.stringify(bodyPayload), 'utf8').toString('base64');
 
   const nowSeconds = Math.floor(Date.now() / 1000);
-  const deadlineSeconds = Number(process.env.TASKS_DEADLINE_SEC || 150);
+  const rawDeadline = Number(process.env.TASKS_DEADLINE_SEC || 900);
+  const deadlineSeconds = Math.min(Math.max(Number.isFinite(rawDeadline) ? rawDeadline : 900, 30), 1800);
   const delaySeconds = Number(process.env.TASKS_DELAY_SEC || 5);
   const maxAttempts = Number(process.env.TASKS_MAX_ATTEMPTS || 12);
   const minBackoffSeconds = Number(process.env.TASKS_MIN_BACKOFF_SEC || 1);
   const maxBackoffSeconds = Number(process.env.TASKS_MAX_BACKOFF_SEC || 60);
   const maxDoublings = Number(process.env.TASKS_MAX_DOUBLINGS || 4);
 
   const task = {
     httpRequest: {
       httpMethod: 'POST',
       url: WORKER_TASK_URL,            // ★ ingest 하나로 통일
       headers: { 'Content-Type': 'application/json' },
       body,
       ...(TASKS_INVOKER_SA ? { oidcToken: { serviceAccountEmail: TASKS_INVOKER_SA, audience } } : {}),
     },
     // gRPC Duration 객체 (REST가 아님)
+    // Cloud Tasks HTTP deadline: default 15m, clamped to [30s, 30m]
     dispatchDeadline: { seconds: deadlineSeconds, nanos: 0 },
     // 콜드스타트/일시 에러 완충
     scheduleTime: { seconds: nowSeconds + delaySeconds },
     retryConfig: {
       maxAttempts,
       minBackoff: { seconds: minBackoffSeconds },
       maxBackoff: { seconds: maxBackoffSeconds },
       maxDoublings,
     },
   };
 
   try {
     await tasks.createTask({ parent: queuePath, task }, { timeout: 10000 });
   } catch (err) {
     const detail = err?.response?.data || err?.message || String(err);
     console.warn('[tasks.createTask] failed', {
       code: err?.code,
       detail,
       queuePath,
       invoker: process.env.TASKS_INVOKER_SA,
     });
     throw err;
   }
 }
 
