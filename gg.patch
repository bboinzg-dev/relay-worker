diff --git a/server.js b/server.js
index 6d2aa5ac599a29b1a8b6bc2e9e61ca6416e60ea8..cd9865c76ce77e72b3e1bb246ec807654fed25d3 100644
--- a/server.js
+++ b/server.js
@@ -46,64 +46,50 @@ async function enqueueIngestRun(payload = {}) {
   bodyPayload.runId = runId;
   bodyPayload.run_id = runId;
 
   const body = Buffer.from(JSON.stringify(bodyPayload)).toString('base64');
 
   const task = {
     httpRequest: {
       httpMethod: 'POST',
       url: WORKER_TASK_URL,
       headers: { 'Content-Type': 'application/json' },
       body,
       ...(TASKS_INVOKER_SA
         ? { oidcToken: { serviceAccountEmail: TASKS_INVOKER_SA, audience } }
         : {}),
     },
   };
 
   // (선택) 10초로 RPC 타임아웃 단축 — 실패 시 바로 catch → DB만 FAILED 마킹
   await tasks.createTask({ parent: queuePath, task }, { timeout: 10000 });
   return runId;
 }
 
 
 const app = express();
 
-/* ---------------- Mount modular routers (keep existing) ---------------- */
-try { app.use(require('./server.health'));   console.log('[BOOT] mounted /api/health'); } catch {}
-try { app.use(require('./server.optimize')); console.log('[BOOT] mounted /api/optimize/*'); } catch {}
-try { app.use(require('./server.checkout')); console.log('[BOOT] mounted /api/checkout/*'); } catch {}
-try { app.use(require('./server.bom'));      console.log('[BOOT] mounted /api/bom/*'); } catch {}
-try { app.use(require('./server.notify'));   console.log('[BOOT] mounted /api/notify/*'); } catch {}
-try { app.use(require('./server.market'));   console.log('[BOOT] mounted /api/listings, /api/purchase-requests, /api/bids'); } catch {}
-try { app.use(require('./src/routes/vision.upload')); console.log('[BOOT] mounted /api/vision/guess (upload)'); } catch {}
-
-
-
-/* NOTE: The parts router already exists in your repo; keep it mounted. */
-try { app.use('/api/parts', require('./src/routes/parts')); } catch {}
-
 app.use(bodyParser.json({ limit: '25mb' }));
 app.use(bodyParser.urlencoded({ extended: true }));
 app.disable('x-powered-by');
 
 /* ---------------- Env / Config ---------------- */
 const PORT = process.env.PORT || 8080;
 const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';
 
 function parseCorsOrigins(envStr) {
   if (!envStr) return null;
   const items = envStr.split(',').map(s => s.trim()).filter(Boolean);
   return items.map(p => {
     if (p.startsWith('/') && p.endsWith('/')) {
       const body = p.slice(1, -1);
       return new RegExp(body);
     }
     return p;
   });
 }
 const CORS_ALLOW = parseCorsOrigins(process.env.CORS_ALLOW_ORIGINS);
 
 /* ---------------- CORS / Security ---------------- */
 if (CORS_ALLOW) {
   app.use(cors({ origin: CORS_ALLOW, credentials: true }));
 } else {
diff --git a/server.js b/server.js
index 6d2aa5ac599a29b1a8b6bc2e9e61ca6416e60ea8..cd9865c76ce77e72b3e1bb246ec807654fed25d3 100644
--- a/server.js
+++ b/server.js
@@ -129,50 +115,62 @@ function issueToken(payload) {
   };
 }
 
 function loginHandler(req, res) {
   try {
     const { id, token } = issueToken(req.body || {});
     return res.json({ ok: true, token, user: { username: id } });
   } catch (e) {
     return res.status(400).json({ ok: false, error: String(e?.message || e) });
   }
 }
 
 const authRouter = express.Router();
 // 헬스(선택)
 authRouter.get('/health', (_req, res) => res.json({ ok: true, stub: true }));
 // 로그인/로그아웃
 authRouter.post('/login', loginHandler);
 authRouter.post('/logout', (_req, res) => res.json({ ok: true }));
 
 // ✅ /auth/* 경로로 확정 마운트 (항상 가장 먼저 잡히게)
 app.use('/auth', authRouter);
 
 // (구버전 호환) /login 으로 들어오면 같은 핸들러 사용
 app.post('/login', loginHandler);
 
+/* ---------------- Mount modular routers (after global middleware) ---------------- */
+try { app.use(require('./server.health'));   console.log('[BOOT] mounted /api/health'); } catch {}
+try { app.use(require('./server.optimize')); console.log('[BOOT] mounted /api/optimize/*'); } catch {}
+try { app.use(require('./server.checkout')); console.log('[BOOT] mounted /api/checkout/*'); } catch {}
+try { app.use(require('./server.bom'));      console.log('[BOOT] mounted /api/bom/*'); } catch {}
+try { app.use(require('./server.notify'));   console.log('[BOOT] mounted /api/notify/*'); } catch {}
+try { app.use(require('./server.market'));   console.log('[BOOT] mounted /api/listings, /api/purchase-requests, /api/bids'); } catch {}
+try { app.use(require('./src/routes/vision.upload')); console.log('[BOOT] mounted /api/vision/guess (upload)'); } catch {}
+
+/* NOTE: The parts router already exists in your repo; keep it mounted. */
+try { app.use('/api/parts', require('./src/routes/parts')); } catch {}
+
 
 /* ---------------- Upload ---------------- */
 const upload = multer({ storage: multer.memoryStorage() });
 
 /* Session helpers (Cloud Run Bearer 또는 pp_session 쿠키 허용) */
 function parseCookie(name, cookieHeader) {
   if (!cookieHeader) return null;
   const m = new RegExp('(?:^|;\\s*)' + name + '=([^;]+)').exec(cookieHeader);
   return m ? decodeURIComponent(m[1]) : null;
 }
 function verifyJwtCookie(cookieHeader) {
   const raw = parseCookie('pp_session', cookieHeader);
   if (!raw) return null;
   try { return jwt.verify(raw, JWT_SECRET); } catch { return null; }
 }
 async function requireSession(req, res, next) {
   const auth = String(req.headers.authorization || '');
   if (/^Bearer\s+.+/i.test(auth)) return next(); // Cloud Run/IAP
   const claims = verifyJwtCookie(req.headers.cookie || '');
   if (claims) { req.user = claims; return next(); }
   return res.status(401).json({ ok: false, error: 'UNAUTHORIZED' });
 }
 
 /* ---------------- Health & Env ---------------- */
 app.get('/_healthz', (_req, res) => res.type('text/plain').send('ok'));
