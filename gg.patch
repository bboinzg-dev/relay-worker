diff --git a/src/utils/vertex.js b/src/utils/vertex.js
index 037b14e0aacafb157bf6648cbb68d409de6a7c2e..2bff4f97663fc96f5d1c868efbf91dcf18668bbe 100644
--- a/src/utils/vertex.js
+++ b/src/utils/vertex.js
@@ -24,26 +24,60 @@ function getModel(systemText, modelId = DEFAULT_MODEL_ID) {
   }
   return getVertex().getGenerativeModel(cfg);
 }
 
 async function callModelJson(systemText, userText, { modelId, maxOutputTokens = 4096, temperature = 0.2, topP = 0.8 } = {}) {
   const model = getModel(systemText, modelId);
   const req = {
     contents: [{ role: 'user', parts: [{ text: String(userText || '') }]}],
     generationConfig: {
       responseMimeType: 'application/json',
       temperature,
       topP,
       maxOutputTokens,
     },
   };
   const resp = await model.generateContent(req);
   const txt = resp?.response?.candidates?.[0]?.content?.parts?.[0]?.text || '{}';
   try {
     const parsed = safeJsonParse(txt);
     return parsed ?? {};
   } catch {
     throw new Error(`Vertex output is not JSON: ${String(txt).slice(0, 300)}`);
   }
 }
 
-module.exports = { getVertex, getModel, callModelJson };
+async function extractOrderingRecipe(gcsUriOrText) {
+  const source = String(gcsUriOrText || '');
+  if (!source) return { variant_domains: {}, pn_template: null };
+
+  const sys = [
+    'You analyze ORDERING INFORMATION / HOW TO ORDER sections from electronic component datasheets.',
+    'Return strict JSON with shape: {"variant_domains": {"key": ["values"]}, "pn_template": "string or null"}.',
+    'Keys must be concise machine-readable snake_case identifiers.',
+    'If an option is blank/"Nil", represent it with an empty string "".',
+    'Do not fabricate data. Leave arrays empty when unsure.',
+  ].join('\n');
+
+  const payload = /^gs:\/\//i.test(source)
+    ? { gcs_uri: source }
+    : { text: source };
+
+  let out;
+  try {
+    out = await callModelJson(sys, JSON.stringify({ source: payload }), { maxOutputTokens: 2048 });
+  } catch (err) {
+    console.warn('[vertex] extractOrderingRecipe failed:', err?.message || err);
+    return { variant_domains: {}, pn_template: null };
+  }
+
+  const domains = out && typeof out === 'object' && out.variant_domains && typeof out.variant_domains === 'object'
+    ? out.variant_domains
+    : {};
+  const tpl = typeof out?.pn_template === 'string' && out.pn_template.trim()
+    ? out.pn_template
+    : null;
+
+  return { variant_domains: domains, pn_template: tpl };
+}
+
+module.exports = { getVertex, getModel, callModelJson, extractOrderingRecipe };