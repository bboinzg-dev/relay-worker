diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index 41d6635befccbeb987196b47ad7b8bf321b63765..14612fcd729b9db58480c06c304c8a45203f4f68 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -642,56 +642,56 @@ async function runAutoIngest(input = {}) {
   for (const row of explodedRows) {
     const seeds = [];
     const seenSeed = new Set();
     const pushSeed = (val) => {
       if (val == null) return;
       if (Array.isArray(val)) { val.forEach(pushSeed); return; }
       const str = String(val).trim();
       if (!str) return;
       const parts = splitAndCarryPrefix(str);
       if (parts.length > 1) { parts.forEach(pushSeed); return; }
       const normed = str.toLowerCase();
       if (seenSeed.has(normed)) return;
       seenSeed.add(normed);
       seeds.push(str);
     };
     pushSeed(row.code);
     pushSeed(row.mpn);
     pushSeed(row.part_number);
     pushSeed(row.part_no);
 
     let mpn = seeds.length ? seeds[0] : '';
     if (!mpn && candidateMap.length) mpn = candidateMap[0].raw;
     mpn = String(mpn || '').trim();
     if (!mpn) continue;
     const mpnNorm = normalizeCode(mpn);
-    const brandKey = normLower(rec.brand || brandName);
+    const brandKey = normLower(row.brand || brandName);
+    const rec = {};
     const naturalKey = `${brandKey}::${mpnNorm}`;
     if (!mpnNorm || seenCodes.has(naturalKey)) continue;
     seenCodes.add(naturalKey);
 
-    const rec = {};
     rec.family_slug = family;
     rec.brand = row.brand || brandName;
     rec.pn = mpn;
     if (row.code != null) rec.code = row.code;
     if (!rec.code) rec.code = mpn;
     rec.series_code = row.series_code ?? row.series ?? baseSeries ?? null;
     if (row.series != null && physicalCols.has('series')) rec.series = row.series;
     rec.datasheet_uri = row.datasheet_uri || gcsUri;
     if (row.datasheet_url) rec.datasheet_url = row.datasheet_url;
     else if (rec.datasheet_uri && rec.datasheet_url == null) rec.datasheet_url = rec.datasheet_uri;
     if (row.mfr_full != null) rec.mfr_full = row.mfr_full;
     let verified;
     if (row.verified_in_doc != null) {
       if (typeof row.verified_in_doc === 'string') {
         verified = row.verified_in_doc.trim().toLowerCase() === 'true';
       } else {
         verified = Boolean(row.verified_in_doc);
       }
     } else {
       verified = candidateNormSet.has(mpnNorm) || mpnNormFromDoc.has(mpnNorm);
     }
     rec.verified_in_doc = Boolean(verified);
     rec.image_uri = row.image_uri || coverUri || null;
     if (coverUri && rec.cover == null) rec.cover = coverUri;
     const displayName = row.display_name || row.displayname || `${rec.brand} ${mpn}`;
