diff --git a/src/utils/blueprint.js b/src/utils/blueprint.js
index 6079e7d9d3c45e13be0336ba72a53da8a5441a91..6d5d57820b133eee5584e49802282ec3426565b6 100644
--- a/src/utils/blueprint.js
+++ b/src/utils/blueprint.js
@@ -37,68 +37,52 @@ function deriveVariantKeys(blueprintRow = {}) {
   const ingestOptions = blueprintRow.ingest_options || blueprintRow.ingestOptions || {};
   if (Array.isArray(ingestOptions.variant_keys)) {
     return normalizeKeyList(ingestOptions.variant_keys);
   }
   if (Array.isArray(blueprintRow.variant_keys)) {
     return normalizeKeyList(blueprintRow.variant_keys);
   }
   return [];
 }
 
 function ensureFamilyOverrides(blueprint, registryRow) {
   if (!blueprint) return blueprint;
 
   const ingestOptions = blueprint.ingestOptions || {};
   const family = String(blueprint.family_slug || '').trim().toLowerCase();
   const forcedVariantKeys = new Set(blueprint.variant_keys || []);
 
   const addVariantKeys = (keys = []) => {
     for (const key of keys) {
       const norm = normalizeKeyList([key])[0];
       if (!norm) continue;
       forcedVariantKeys.add(norm);
     }
   };
 
-  const ensureTemplate = (template) => {
-    if (!template) return;
-    if (!ingestOptions.pn_template && !ingestOptions.pnTemplate) {
-      ingestOptions.pn_template = template;
-      ingestOptions.pnTemplate = template;
-      return;
-    }
-    if (!ingestOptions.pn_template && ingestOptions.pnTemplate) {
-      ingestOptions.pn_template = ingestOptions.pnTemplate;
-    }
-    if (!ingestOptions.pnTemplate && ingestOptions.pn_template) {
-      ingestOptions.pnTemplate = ingestOptions.pn_template;
-    }
-  };
-
   if (family === 'relay_power') {
     addVariantKeys(['coil_voltage_vdc', 'contact_form', 'suffix']);
-    ensureTemplate('{{series_code}}{{contact_form}}{{coil_voltage_vdc|pad=2}}{{suffix}}');
   }
 
   if (family === 'relay_signal') {
     // 템플릿은 강제하지 않고 LLM/표에서 추론한 pn_template 사용
   }
 
   const variantKeys = Array.from(forcedVariantKeys);
   blueprint.variant_keys = variantKeys;
   ingestOptions.variant_keys = variantKeys;
   blueprint.ingestOptions = ingestOptions;
 
   const allowed = Array.isArray(blueprint.allowedKeys) ? blueprint.allowedKeys : [];
   const generic = [
     'pn_jp',
     'pn_aliases',
     'ordering_market',
     'coil_voltage_vdc',
     'coil_voltage_vac',
     'contact_form',
     'contact_arrangement',
     'terminal_form',
     'terminal_shape',
     'contact_rating_text',
     'dielectric_strength_v',
     'operate_time_ms',