diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index db4f8e1f5e405928f7e4b4d098aa6ba3463fee49..b75a0332f1b5c725fb4f91fc43a03b34a8a2ea33 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -6,51 +6,51 @@ const { getColumnsOf } = require('./ensure-spec-columns');
 const META_KEYS = new Set([
   'family_slug',
   'brand',
   'brand_norm',
   'pn',
   'pn_norm',
   'code',
   'code_norm',
   'mfr_full',
   'datasheet_uri',
   'verified_in_doc',
   'display_name',
   'displayname',
   'image_uri',
   'cover',
   'series',
   'series_code',
   'raw_json',
   'created_at',
   'updated_at',
 ]);
 
 const CONFLICT_KEYS = ['brand_norm', 'code_norm'];
 
 const CODE_PATTERN = /^[A-Za-z0-9][A-Za-z0-9._\-/]{1,127}$/;
-const CODE_FORBIDDEN_RE = /(sample|prototype|dummy|test|pdf|font|xref)/i;
+const CODE_FORBIDDEN_RE = /(sample|prototype|dummy|test|pdf|font|xref|type0|dfonttype0c|aesv2|y62)/i;
 
 const RANGE_PATTERN = /(-?\d+(?:,\d{3})*(?:\.\d+)?)(?:\s*([kmgmunpµ]))?(?:\s*[a-z%°]*)?\s*(?:to|~|–|—|-)\s*(-?\d+(?:,\d{3})*(?:\.\d+)?)(?:\s*([kmgmunpµ]))?/i;
 const NUMBER_PATTERN = /(-?\d+(?:,\d{3})*(?:\.\d+)?)(?:\s*([kmgmunpµ]))?/i;
 const SCALE_MAP = {
   k: 1e3,
   m: 1e-3,
   g: 1e9,
   'µ': 1e-6,
   u: 1e-6,
   n: 1e-9,
   p: 1e-12,
 };
 
 function normKey(key) {
   return String(key || '')
     .trim()
     .toLowerCase();
 }
 
 function isNumericType(type = '') {
   const t = String(type || '').toLowerCase();
   return (
     t.includes('int') ||
     t.includes('numeric') ||
     t.includes('decimal') ||
diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index db4f8e1f5e405928f7e4b4d098aa6ba3463fee49..b75a0332f1b5c725fb4f91fc43a03b34a8a2ea33 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -417,50 +417,54 @@ async function saveExtractedSpecs(targetTable, familySlug, rows = [], options =
       const rec = {};
       for (const [key, value] of Object.entries(row || {})) {
         rec[normKey(key)] = value;
       }
 
       const brandInfo = normalizeBrandValue(rec.brand ?? rec.brand_norm ?? '', aliasMap);
       if (!brandInfo.ok) {
         if (brandInfo.reason === 'brand_not_allowed' && brandInfo.detail) {
           console.warn('[persist] brand alias not found:', brandInfo.detail);
         }
         result.skipped.push({ reason: brandInfo.reason, detail: brandInfo.detail || null });
         continue;
       }
       rec.brand = brandInfo.brand;
       rec.brand_norm = brandInfo.brandNorm;
 
       buildPnIfMissing(rec, pnTemplate);
 
       let codeValue = rec.code ?? rec.pn ?? null;
       if (typeof codeValue === 'string') codeValue = codeValue.trim();
       else codeValue = codeValue == null ? '' : String(codeValue).trim();
       if (!codeValue) {
         result.skipped.push({ reason: 'missing_code' });
         continue;
       }
+      if (/^[0-9A-F]{12,}$/i.test(codeValue)) {
+        result.skipped.push({ reason: 'invalid_code' });
+        continue;
+      }
       if (!CODE_PATTERN.test(codeValue) || CODE_FORBIDDEN_RE.test(codeValue)) {
         result.skipped.push({ reason: 'invalid_code' });
         continue;
       }
       rec.code = codeValue;
       const codeNorm = normKey(codeValue);
       if (!codeNorm) {
         result.skipped.push({ reason: 'invalid_code' });
         continue;
       }
       rec.code_norm = codeNorm;
 
       let pnValue = String(rec.pn || '').trim();
       if (!pnValue) {
         rec.pn = codeValue;
         pnValue = codeValue;
       }
       rec.pn = pnValue;
       const pnNorm = normKey(rec.pn);
       if (!pnNorm) {
         result.skipped.push({ reason: 'missing_pn' });
         continue;
       }
       if (physicalCols.has('pn_norm')) rec.pn_norm = pnNorm;
 
