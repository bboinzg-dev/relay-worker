diff --git a/db.js b/db.js
index 18495a38ca93abae4548383ce1280424bfbc4a81..0d4bbff34fa61cfff8011c4e5d91d54efe506ca7 100644
--- a/db.js
+++ b/db.js
@@ -54,59 +54,71 @@ function resolveSslConfig(connStr) {
   let sslmode = '';
   try {
     const u = new URL(connStr);
     sslmode = (u.searchParams.get('sslmode') || '').toLowerCase();
   } catch {}
 
   if (insecure) {
     return { rejectUnauthorized: false };
   }
 
   if (caPath && fs.existsSync(caPath)) {
     return { ca: fs.readFileSync(caPath), rejectUnauthorized: true };
   }
 
   // AlloyDB는 TLS 필수(ENCRYPTED_ONLY). CA 없으면 기본적으로 검증만 끔.
   if (sslmode === 'disable') {
     // 비권장: AlloyDB에서는 실패할 수 있음
     return false;
   }
   return { rejectUnauthorized: false };
 }
 
 console.log('[db] file =', __filename);
 console.log('[db] env  =', { DB_TLS_INSECURE: process.env.DB_TLS_INSECURE, PGSSLMODE: process.env.PGSSLMODE });
 
+function parseEnvInt(name, defaultValue) {
+  const raw = process.env[name];
+  if (!raw) return defaultValue;
+
+  const parsed = parseInt(raw, 10);
+  if (!Number.isFinite(parsed)) {
+    console.warn(`[db] invalid numeric value for ${name}:`, raw, `→ fallback ${defaultValue}`);
+    return defaultValue;
+  }
+  return parsed;
+}
+
 function buildPool() {
   const connectionString = resolveConnectionString();
   const ssl = resolveSslConfig(connectionString);
 
-  const max = parseInt(process.env.PGPOOL_MAX || '10', 10);
-  const idle = parseInt(process.env.PG_IDLE_TIMEOUT_MS || '600000', 10);
-  const connTimeout = parseInt(process.env.PG_CONNECT_TIMEOUT_MS || '30000', 10);
-  const statementTimeout = parseInt(process.env.PG_STATEMENT_TIMEOUT_MS || '30000', 10);
-  const queryTimeout = parseInt(process.env.PG_QUERY_TIMEOUT_MS || '30000', 10);
+  const max = parseEnvInt('PGPOOL_MAX', 10);
+  const idle = parseEnvInt('PG_IDLE_TIMEOUT_MS', 600000);
+  const connTimeout = parseEnvInt('PG_CONNECT_TIMEOUT_MS', 30000);
+  const statementTimeout = parseEnvInt('PG_STATEMENT_TIMEOUT_MS', 30000);
+  const queryTimeout = parseEnvInt('PG_QUERY_TIMEOUT_MS', 30000);
 
   const config = {
     connectionString,
     ssl,                                 // 위에서 결정
     max,
     // 긴 OCR/추출 대기 후에도 커넥션 유지/재연결 여유
     idleTimeoutMillis: idle,
     connectionTimeoutMillis: connTimeout,
   };
 
   if (Number.isFinite(statementTimeout)) config.statement_timeout = statementTimeout;
   if (Number.isFinite(queryTimeout)) config.query_timeout = queryTimeout;
 
   const pool = new Pool(config);
 
   // 로그(민감정보 제외)
   try {
     const u = new URL(connectionString.replace(/:[^@]+@/, ':***@'));
     console.log('[db] pool created', {
       host: u.hostname,
       port: u.port || 5432,
       db: u.pathname.replace(/^\//, ''),
       ssl:
         ssl === false
           ? 'off'
