diff --git a/server.js b/server.js
index c4bb1e322258ba5dca3e7a0af4407f7ab859d5b2..7e201762e094f30be4939ba0318ec89ef52a6059 100644
--- a/server.js
+++ b/server.js
@@ -317,51 +317,50 @@ try { app.use('/api/parts', require('./src/routes/parts')); } catch {}
 
 // ✅ ALWAYS-ON 디버그 엔드포인트 (환경변수와 무관하게 항상 열림)
 app.get('/_routes', (req, res) => {
   try {
     const list = [];
     app._router.stack.forEach((m) => {
       if (m.route && m.route.path) {
         const methods = Object.keys(m.route.methods).join(',').toUpperCase();
         list.push(`${methods.padEnd(6)} ${m.route.path}`);
       } else if (m.name === 'router' && m.handle?.stack) {
         m.handle.stack.forEach((h) => {
           const p = h.route?.path;
           const ms = h.route ? Object.keys(h.route.methods).join(',').toUpperCase() : '';
           if (p) list.push(`${ms.padEnd(6)} ${m.regexp?.toString() || ''}${p}`);
         });
       }
     });
     res.type('text/plain').send(list.join('\n') || 'no-routes');
   } catch (e) {
     res.status(500).json({ ok: false, error: String(e?.message || e) });
   }
 });
 console.log('[BOOT] ALWAYS-ON route debug at /_routes');
 
 // 🔍 컨테이너 내 파일 확인: server*.js 포함 여부 즉시 점검
-const fs = require('fs');
 app.get('/_ls', (_req, res) => {
   try {
     const here = fs.readdirSync(__dirname).sort();
     res.json({ dir: __dirname, files: here.filter(f => f.startsWith('server')) });
   } catch (e) {
     res.status(500).json({ ok:false, error: String(e?.message || e) });
   }
 });
 console.log('[BOOT] ALWAYS-ON file lister at /_ls');
 
 
 /* ---------------- Upload ---------------- */
 const upload = multer({ storage: multer.memoryStorage() });
 
 /* Session helpers (Cloud Run Bearer 또는 pp_session 쿠키 허용) */
 function parseCookie(name, cookieHeader) {
   if (!cookieHeader) return null;
   const m = new RegExp('(?:^|;\\s*)' + name + '=([^;]+)').exec(cookieHeader);
   return m ? decodeURIComponent(m[1]) : null;
 }
 function verifyJwtCookie(cookieHeader) {
   const raw = parseCookie('pp_session', cookieHeader);
   if (!raw) return null;
   try { return jwt.verify(raw, JWT_SECRET); } catch { return null; }
 }
