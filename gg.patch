diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index f887d805d8a7e12340fd1e73f739c99586849219..124285123331be5709c0c972539080b1de98bb9b 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -366,55 +366,65 @@ async function extractPartNumbersFromText(text, { series } = {}) {
 
   const prefix = series ? normalizeCode(series) : null;
   const seen = new Set();
   const out = [];
 
   const push = (raw) => {
     if (!raw) return;
     const norm = normalizeCode(raw);
     if (!norm) return;
     if (prefix && !norm.startsWith(prefix)) return;
     if (seen.has(norm)) return;
     seen.add(norm);
     const cleaned = typeof raw === 'string' ? raw.trim() : String(raw || '');
     out.push(cleaned || norm);
   };
 
   for (const { code } of extractPartNumbersFromTypesTables(src, 200)) push(code);
   for (const { code } of rankPartNumbersFromOrderingSections(src, 200)) push(code);
   for (const { code } of extractPartNumbersBySeriesHeuristic(src, 200)) push(code);
 
   return out;
 }
 
 
 
-async function runAutoIngest({
-  gcsUri, family_slug=null, brand=null, code=null, series=null, display_name=null,
-}) {
+async function runAutoIngest(input = {}) {
+  const {
+    gcsUri: rawGcsUri = null,
+    gsUri: rawGsUri = null,
+    family_slug = null,
+    brand = null,
+    code = null,
+    series = null,
+    display_name = null,
+  } = input;
+
+  const gcsUri = (rawGcsUri || rawGsUri || '').trim();
+
   const started = Date.now();
-  if (!gcsUri) throw new Error('gcsUri required');
+  if (!gcsUri) throw new Error('gcsUri/gsUri required');
    // 기본 2분로 단축 (원하면 ENV로 재조정)
   const BUDGET = Number(process.env.INGEST_BUDGET_MS || 120000);
   const FAST = /^(1|true|on)$/i.test(process.env.FAST_INGEST || '1');
   const PREVIEW_BYTES = Number(process.env.PREVIEW_BYTES || (FAST ? 32768 : 65536));
   const EXTRACT_HARD_CAP_MS = Number(process.env.EXTRACT_HARD_CAP_MS || (FAST ? 30000 : Math.round(BUDGET * 0.6)));
   const FIRST_PASS_CODES = parseInt(process.env.FIRST_PASS_CODES || '20', 10);
 
   const withTimeout = (p, ms, label) => new Promise((resolve, reject) => {
     const timer = setTimeout(() => reject(new Error(`TIMEOUT:${label}`)), ms);
     Promise.resolve(p)
       .then((val) => { clearTimeout(timer); resolve(val); })
       .catch((err) => { clearTimeout(timer); reject(err); });
   });
 
 
     // family 추정 (미지정 시 일부 텍스트만 읽어 빠르게 추정)
   let fileName = '';
   try { const { name } = parseGcsUri(gcsUri); fileName = path.basename(name); } catch {}
   let family = (family_slug||'').toLowerCase() || guessFamilySlug({ fileName }) || 'relay_power';
   if (!family && !FAST) {
     try {
      const text = await readText(gcsUri, 256*1024);
      family = guessFamilySlug({ fileName, previewText: text }) || 'relay_power';
      // ★ 강제 보정: 제목/본문에 Signal Relay가 있으면 무조건 signal로
      if (/subminiature\s+signal\s+relay|signal\s+relay/i.test(text)) family = 'relay_signal';
