diff --git a/server.js b/server.js
index c3b18f039e967aa489f8a2b3355aa4af96e42b35..6b2dfde5c46a14b10639a2c87aaa0384bbfe0128 100644
--- a/server.js
+++ b/server.js
@@ -363,50 +363,62 @@ try {
   const aiModule = require('./server.ai');
   if (aiModule && typeof aiModule === 'function' && aiModule.stack) {
     app.use('/api/ai', aiModule);
     console.log('[BOOT] mounted AI routes at /api/ai/* (router export)');
   } else if (typeof aiModule === 'function') {
     aiModule(app);
     console.log('[BOOT] mounted AI routes via function(export)');
   } else if (aiModule) {
     app.use('/api/ai', aiModule);
     console.log('[BOOT] mounted AI routes at /api/ai/* (object export)');
   } else {
     console.warn('[BOOT] server.ai export missing or unsupported');
   }
 } catch (e) {
   console.error('[BOOT] ai mount failed', e?.message || e);
   // 🔰 Fallback: server.ai.js 로딩 실패/누락 시에도 즉시 동작하도록 최소 라우트 제공
   const express = require('express');
   const fb = express.Router();
   fb.get('/ping', (_req, res) => res.json({ ok: true, fallback: true }));
   fb.get('/resolve', (req, res) => res.json({ ok: true, echo: String(req.query?.q || '') }));
   fb.post('/resolve', (req, res) => res.json({ ok: true, echo: String((req.body && req.body.q) || '') }));
   app.use('/api/ai', fb);
   console.warn('[BOOT] fallback AI routes mounted at /api/ai/*');
 }
 
+/* ---------------- Worker ingest endpoint (Cloud Tasks target) ---------------- */
+app.post('/api/worker/ingest', async (req, res) => {
+  try {
+    const payload = (req.body?.payload) || req.body || {};
+    const out = await getIngest().runAutoIngest(payload);
+    return res.status(202).json({ ok: true, run: out?.runId || null });
+  } catch (e) {
+    console.error('[worker/ingest] error:', e?.message || e);
+    return res.status(500).json({ ok: false, error: String(e?.message || e) });
+  }
+});
+
 /* ---------------- Mount modular routers (after global middleware) ---------------- */
 try { app.use(require('./server.optimize')); console.log('[BOOT] mounted /api/optimize/*'); } catch {}
 try { app.use(require('./server.checkout')); console.log('[BOOT] mounted /api/checkout/*'); } catch {}
 try { app.use(require('./server.bom'));      console.log('[BOOT] mounted /api/bom/*'); } catch {}
 try { app.use(require('./server.notify'));   console.log('[BOOT] mounted /api/notify/*'); } catch {}
 try { app.use(require('./server.market'));   console.log('[BOOT] mounted /api/listings, /api/purchase-requests, /api/bids'); } catch {}
 try { app.use(require('./server.retail')); console.log('[BOOT] mounted /api/retail/*'); } catch (e) { console.error(e); }
 try { app.use(require('./server.retail.import')); console.log('[BOOT] mounted /api/retail/import'); } catch {}
 try { app.use(require('./src/routes/vision.upload')); console.log('[BOOT] mounted /api/vision/guess (upload)'); } catch {}
 try { app.use(require('./server.ingest.status')); console.log('[BOOT] mounted /api/ingest/:id'); } catch {}
 
 // 인라인 AI 라우터(간소 버전)는 제거 — server.ai.js 하나만 유지
 
 /* NOTE: The parts router already exists in your repo; keep it mounted. */
 try { app.use('/api/parts', require('./src/routes/parts')); } catch {}
 
 // ✅ ALWAYS-ON 디버그 엔드포인트 (환경변수와 무관하게 항상 열림)
 app.get('/_routes', (req, res) => {
   try {
     const list = [];
     app._router.stack.forEach((m) => {
       if (m.route && m.route.path) {
         const methods = Object.keys(m.route.methods).join(',').toUpperCase();
         list.push(`${methods.padEnd(6)} ${m.route.path}`);
       } else if (m.name === 'router' && m.handle?.stack) {
