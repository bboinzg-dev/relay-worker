diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index 6bf142f88a70ed415d8b27e641ac590101c41ff3..f491a262b49d14e19cc174f324f85495d9678c87 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -1362,50 +1362,58 @@ async function saveExtractedSpecs(targetTable, familySlug, rows = [], options =
           }
           if (!orderingCodes.size && Array.isArray(orderingPayload.scored)) {
             for (const scored of orderingPayload.scored) {
               if (!scored || typeof scored !== 'object') continue;
               const normalized = typeof scored.code === 'string'
                 ? scored.code.trim().toUpperCase()
                 : null;
               if (normalized) orderingCodes.add(normalized);
             }
           }
           if (orderingCodes.has(pnUpper)) {
             rec.verified_in_doc = true;
           }
         }
       }
 
       const guard = shouldInsert(rec, { coreSpecKeys: guardKeys, candidateSpecKeys });
       if (!guard.ok) {
         const skip = { reason: guard.reason, detail: guard.detail || null };
         if (rec.last_error) skip.last_error = rec.last_error;
         result.skipped.push(skip);
         continue;
       }
 
       const pnValue = String(rec.pn || rec.code || '').trim();
+      const docType = String(options?.docType || '').toLowerCase();
+      const requiresVoltage = Array.isArray(options?.coreSpecKeys) &&
+        options.coreSpecKeys.some((k) => /coil_voltage/.test(String(k).toLowerCase()));
+      if (docType === 'ordering' && requiresVoltage && !/\d/.test(pnValue)) {
+        if (physicalCols.has('last_error')) rec.last_error = 'incomplete_pn';
+        result.skipped.push({ reason: 'invalid_code', detail: 'missing_voltage_token' });
+        continue;
+      }
       const pnIsFallback = isMinimalFallbackPn(pnValue);
       if (!pnValue || !isValidCode(pnValue) || (!pnIsFallback && FORBIDDEN_RE.test(pnValue))) {
         const skippedCode = pnValue || String(rec.code || rec.pn || '').trim() || '(no-code)';
         if (physicalCols.has('last_error')) rec.last_error = 'invalid_code';
         result.skipped.push({ reason: 'invalid_code', code: skippedCode, last_error: 'invalid_code' });
         continue;
       }
 
       rec.pn = pnValue;
       if (rec.code == null || String(rec.code).trim() === '') {
         rec.code = pnValue;
       }
 
       const pnNorm = normKey(pnValue);
       if (!pnNorm) {
         if (physicalCols.has('last_error')) rec.last_error = 'missing_pn';
         result.skipped.push({ reason: 'missing_pn', last_error: 'missing_pn' });
         continue;
       }
       if (physicalCols.has('pn_norm')) rec.pn_norm = pnNorm;
 
       const codeNorm = normKey(rec.code);
       if (!codeNorm) {
         if (physicalCols.has('last_error')) rec.last_error = 'invalid_code';
         result.skipped.push({ reason: 'invalid_code', last_error: 'invalid_code' });