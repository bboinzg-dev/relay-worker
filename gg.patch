diff --git a/src/utils/ai.js b/src/utils/ai.js
index 8c726040578a200529119087b5d84270c480bd40..f1a0ede8b2883e02f316d2ca17ac53d6d8453702 100644
--- a/src/utils/ai.js
+++ b/src/utils/ai.js
@@ -1,45 +1,77 @@
 'use strict';
 
+const { callModelJson } = require('./vertex');
+
 let client = null;
 
 function getClient() {
   if (client) return client;
   try {
     const { VertexAI } = require('@google-cloud/vertexai');
     const project  = process.env.GCP_PROJECT_ID || process.env.GOOGLE_CLOUD_PROJECT;
     const location = process.env.VERTEX_LOCATION || 'asia-northeast3';
     client = new VertexAI({ project, location });
   } catch {
     client = null; // Vertex 미사용(또는 의존성 없음) 시 null 유지
   }
   return client;
 }
 
 /**
  * JSON 스키마 기반 생성. 실패 시 null 리턴(폴백 용이)
  */
 async function generateJSON({ system, input, schema, model }) {
   const c = getClient();
   if (!c) return null;
 
   const m = c.getGenerativeModel({
     model: model || process.env.VERTEX_MODEL_ID || 'gemini-2.5-flash',
     generationConfig: {
       temperature: 0.2,
       maxOutputTokens: 2048,
       responseMimeType: 'application/json',
     },
     ...(system ? { systemInstruction: { parts: [{ text: system }] } } : {}),
   });
 
   const res = await m.generateContent({
     contents: [{ role: 'user', parts: [{ text: JSON.stringify({ input, schema }) }]}],
   });
 
   const text =
     res?.response?.candidates?.[0]?.content?.parts?.[0]?.text || '{}';
 
   try { return JSON.parse(text); } catch { return null; }
 }
 
-module.exports = { generateJSON };
+async function normalizeValueLLM({ family, key, raw, enumValues = null }) {
+  const sys = [
+    'You map free-text spec values to canonical catalog values.',
+    'Always return strict JSON with fields: normalized, confidence, unit, magnitude.',
+    'normalized: canonical string or empty if cannot map.',
+    'If enum_values are provided, choose one of them exactly (case-insensitive).',
+    'For numeric values, also extract magnitude (number) and unit (string) if present.',
+  ].join('\n');
+
+  const usr = JSON.stringify({
+    family,
+    key,
+    raw: String(raw ?? ''),
+    enum_values: enumValues && enumValues.length ? enumValues : null,
+  });
+
+  const out = await callModelJson(sys, usr, {
+    temperature: 0.1,
+    topP: 0.2,
+    maxOutputTokens: 800,
+  });
+
+  return {
+    normalized: out && typeof out.normalized === 'string' ? out.normalized.trim() : null,
+    confidence: Number(out?.confidence ?? 0) || 0,
+    unit: out && typeof out.unit === 'string' ? out.unit.trim() : null,
+    magnitude: out && out.magnitude != null ? Number(out.magnitude) : null,
+  };
+}
+
+module.exports = { generateJSON, normalizeValueLLM };
