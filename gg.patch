diff --git a/server.js b/server.js
index cd9865c76ce77e72b3e1bb246ec807654fed25d3..b999f8a4c1acf640c5fc2b73921967b885cd7556 100644
--- a/server.js
+++ b/server.js
@@ -284,53 +284,64 @@ app.get('/catalog/registry', async (_req, res) => {
 
 app.get('/catalog/blueprint/:family', async (req, res) => {
   try {
     const r = await db.query(`
       SELECT b.family_slug, r.specs_table, b.fields_json, b.prompt_template
         FROM public.component_spec_blueprint b
         JOIN public.component_registry r USING (family_slug)
        WHERE b.family_slug = $1
        LIMIT 1`, [req.params.family]);
     if (!r.rows.length) return res.status(404).json({ ok:false, error:'blueprint not found' });
     res.json(r.rows[0]);
   } catch (e) {
     console.error(e); res.status(500).json({ ok:false, error:'blueprint failed' });
   }
 });
 
 /* ---------------- Parts (compat: relay + generic) ---------------- */
 app.get('/parts/detail', async (req, res) => {
   const brand  = (req.query.brand || '').toString();
   const code   = (req.query.code  || '').toString();
   const family = (req.query.family || '').toString().toLowerCase();
   if (!brand || !code) return res.status(400).json({ ok:false, error:'brand & code required' });
 
   try {
     if (family) {
-      const r = await db.query(`SELECT specs_table FROM public.component_registry WHERE family_slug=$1 LIMIT 1`, [family]);
-      if (!r.rows[0]?.specs_table) return res.status(400).json({ ok:false, error:'UNKNOWN_FAMILY' });
-      const row = await db.query(`SELECT * FROM public.${table} WHERE brand_norm = lower($1) AND code_norm = lower($2) LIMIT 1`, [brand, code]);
+      const r = await db.query(
+        `SELECT specs_table FROM public.component_registry WHERE family_slug=$1 LIMIT 1`,
+        [family]
+      );
+      const table = r.rows[0]?.specs_table;
+      if (!table) return res.status(400).json({ ok:false, error:'UNKNOWN_FAMILY' });
+      if (!/^[a-zA-Z0-9_]+$/.test(table)) {
+        console.error('[parts/detail] invalid table name', { table });
+        return res.status(500).json({ ok:false, error:'INVALID_TABLE' });
+      }
+      const row = await db.query(
+        `SELECT * FROM public.${table} WHERE brand_norm = lower($1) AND code_norm = lower($2) LIMIT 1`,
+        [brand, code]
+      );
       return row.rows[0]
         ? res.json({ ok:true, item: row.rows[0] })
         : res.status(404).json({ ok:false, error:'NOT_FOUND' });
     }
 
     // fallback: unified view if present, else legacy relay view
     try {
       const row = await db.query(
         `SELECT * FROM public.component_specs WHERE brand_norm = lower($1) AND code_norm = lower($2) LIMIT 1`,
         [brand, code]
       );
       if (row.rows[0]) return res.json({ ok:true, item: row.rows[0] });
     } catch {}
     const row = await db.query(
       `SELECT * FROM public.relay_specs WHERE brand_norm = lower($1) AND code_norm = lower($2) LIMIT 1`,
       [brand, code]
     );
     return row.rows[0]
       ? res.json({ ok:true, item: row.rows[0] })
       : res.status(404).json({ ok:false, error:'NOT_FOUND' });
   } catch (e) {
     console.error(e); res.status(500).json({ ok:false, error:'detail_failed' });
   }
 });
 
