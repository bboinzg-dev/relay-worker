diff --git a/src/utils/mpn-exploder.js b/src/utils/mpn-exploder.js
index 5904de387b21d8ca800187877fbc47f7bba14fda..392ab9786248bae3901a7e8f16ad0f7411ddea06 100644
--- a/src/utils/mpn-exploder.js
+++ b/src/utils/mpn-exploder.js
@@ -335,96 +335,95 @@ function explodeToRows(base, options = {}) {
 
     const normalizedSeries = normalizeSeriesCode(
       rowValues.series_code
         ?? rowValues.series
         ?? base?.series_code
         ?? base?.series
         ?? null,
     );
     if (normalizedSeries) {
       assignValue(rowValues, 'series_code', normalizedSeries);
       if (rowValues.series == null) assignValue(rowValues, 'series', normalizedSeries);
     }
 
     const normalizedContactForm = normalizeContactForm(
       rowValues.contact_form
         ?? rowValues.contact_arrangement
         ?? rowValues.form
         ?? null,
     );
     if (normalizedContactForm) assignValue(rowValues, 'contact_form', normalizedContactForm);
     else {
       delete rowValues.contact_form;
       delete rowValues.contactform;
     }
 
-        assignValue(rowValues, 'coil_voltage_text', rowValues.coil_voltage_vdc);
+    assignValue(rowValues, 'coil_voltage_text', rowValues.coil_voltage_vdc);
     const normalizedCoilVoltage = normalizeCoilVoltage(rowValues.coil_voltage_vdc);
     if (normalizedCoilVoltage) assignValue(rowValues, 'coil_voltage_vdc', normalizedCoilVoltage);
     else {
       delete rowValues.coil_voltage_vdc;
       delete rowValues.coil_voltagevdc;
     }
 
-    const canUseTemplate = pnTemplate && normalizedSeries && normalizedCoilVoltage;
+    const canUseTemplate = pnTemplate && normalizedSeries;
 
     let generatedByTemplate = false;
     let generatedByFallback = false;
     let code = null;
 
-    if (pnTemplate) {
-  if (!canUseTemplate) return;
+    if (pnTemplate && canUseTemplate) {
       code = renderTemplate(pnTemplate, {
         ...rowValues,
         series: normalizedSeries,
         series_code: normalizedSeries,
         contact_form: normalizedContactForm,
         coil_voltage_vdc: normalizedCoilVoltage,
       });
-            generatedByTemplate = true;
+      generatedByTemplate = true;
     } else if (mpnCandidates[idx]) {
       code = mpnCandidates[idx];
     } else if (mpnCandidates.length) {
       code = mpnCandidates[0];
     } else {
       const parts = [];
       if (normalizedSeries) parts.push(normalizedSeries);
       else if (base?.series) parts.push(base.series);
       else if (base?.series_code) parts.push(base.series_code);
       const suffix = variantKeys
         .map((key) => rowValues[key] ?? rowValues[key?.toLowerCase()])
         .filter((v) => v != null && v !== '')
         .map((v) => String(v))
         .join('');
       if (suffix) parts.push(suffix);
       code = parts.join('');
-            generatedByFallback = true;
+      generatedByFallback = true;
     }
 
     code = String(code || '').trim();
     if (!code) return;
 
-        if ((generatedByTemplate || generatedByFallback) && !isLikelyPn(code)) return;
+    if ((generatedByTemplate || generatedByFallback) && !isLikelyPn(code)) return;
 
     const codeNorm = code.toLowerCase();
     if (rows.some((r) => r.code_norm === codeNorm)) return;
 
     rows.push({
       code,
       code_norm: codeNorm,
       values: rowValues,
     });
   });
 
   return rows;
 }
 
 module.exports = {
   LIST_SEP,
   NON_MPN_WORDS,
   splitAndCarryPrefix,
   normalizeList,
   cartesian,
   renderTemplate,
   explodeToRows,
   normalizeContactForm,
 };
\ No newline at end of file
