diff --git a/src/pipeline/persist.js b/src/pipeline/persist.js
index 361e0a4f5647a2e15ee91646d6869f07319b675d..40fbfc79fb4c0fa4cb635c631f5276e555e04c54 100644
--- a/src/pipeline/persist.js
+++ b/src/pipeline/persist.js
@@ -614,51 +614,51 @@ async function saveExtractedSpecs(targetTable, familySlug, rows = [], options =
     if (/_min(?:_[a-z0-9]+)?$/.test(col) || /_max(?:_[a-z0-9]+)?$/.test(col)) {
       allKeys.add(col);
     }
   }
 
   for (const row of rows) {
     for (const key of Object.keys(row || {})) {
       const normalized = normKey(key);
       if (physicalCols.has(normalized)) allKeys.add(normalized);
     }
   }
 
   if (!allKeys.size) {
     result.skipped.push({ reason: 'schema_not_ready' });
     return result;
   }
 
   const colList = Array.from(allKeys).sort();
   candidateSpecKeys = colList.filter((key) => !META_KEYS.has(key) && key !== 'raw_json');
 
   const insertCols = colList.filter((col) => !NEVER_INSERT.has(col));
   const placeholders = insertCols.map((_, i) => `$${i + 1}`).join(',');
 
   const updateCols = insertCols.filter((col) => !CONFLICT_KEYS.includes(col));
   const updateSql = updateCols.length
-    ? updateCols.map((col) => `"${col}" = EXCLUDED."${col}"`).join(', ')
+    ? updateCols.map((col) => `"${col}" = EXCLUDED."${col}"`).join(', ') + `, "updated_at" = now()`
     : null;
 
   const sql = [
     `INSERT INTO ${targetTable} (${insertCols.map((c) => `"${c}"`).join(',')})`,
     `VALUES (${placeholders})`,
     'ON CONFLICT (brand_norm, pn)',
     updateSql ? `DO UPDATE SET ${updateSql}` : 'DO NOTHING',
     'RETURNING pn',
   ].join('\n');
 
   const client = await pool.connect();
   const warnings = new Set();
   const seenNatural = new Set();
 
   try {
     for (const row of rows) {
       result.processed += 1;
       const rec = {};
       for (const [key, value] of Object.entries(row || {})) {
         rec[normKey(key)] = value;
       }
 
       if ((!rec.brand || String(rec.brand).trim() === '') && options?.brand) {
         rec.brand = options.brand;
       }
