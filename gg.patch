diff --git a/src/pipeline/ingestAuto.js b/src/pipeline/ingestAuto.js
index 84f5d4be9ba38bf93d4f5da0a4fe0b6fdf021df2..e1f88ca45228d2486ffd95263af3d61e3854622a 100644
--- a/src/pipeline/ingestAuto.js
+++ b/src/pipeline/ingestAuto.js
@@ -3399,61 +3399,61 @@ async function doIngestPipeline(input = {}, runIdParam = null) {
           if (!Object.prototype.hasOwnProperty.call(out, metaKey) || existing == null || existing === '') {
             out[metaKey] = rawValue;
           }
           continue;
         }
         const canon = normalizeSpecKeyName(key);
         if (!canon) continue;
         const mapped = SPEC_KEY_ALIAS_MAP.get(canon) || canon;
         canonicalRuntimeSpecKeys.add(mapped);
         const existing = Object.prototype.hasOwnProperty.call(out, mapped) ? out[mapped] : undefined;
         if (!Object.prototype.hasOwnProperty.call(out, mapped) || existing == null || existing === '') {
           out[mapped] = rawValue;
         }
       }
       return out;
     });
   };
 
   if (Array.isArray(extracted?.rows) && extracted.rows.length) {
     extracted.rows = sanitizeSpecRows(extracted.rows);
   }
 
   rowsGlobalRef = Array.isArray(extracted?.rows) ? extracted.rows : null;
 
   const autoAddKeys = Array.from(canonicalRuntimeSpecKeys);
-  const allowed = new Set(
+  const allowedSet = new Set(
     (Array.isArray(allowedKeys) && allowedKeys.length
       ? allowedKeys
       : getBlueprintAllowedKeys(blueprint)
     )
       .map((k) => String(k || '').trim().toLowerCase())
       .filter(Boolean)
   );
   const toCreate = autoAddKeys
     .map((k) => String(k || '').trim())
-    .filter((k) => k && allowed.has(k.toLowerCase()));
+    .filter((k) => k && allowedSet.has(k.toLowerCase()));
 
   if (process.env.AUTO_ADD_FIELDS === '1' && family && toCreate.length) {
     await addColumnsSafeForTable(qualified, family, toCreate, blueprint);
   }
 
   // 🔹 이 변수가 "데이터시트 분석에서 바로 뽑은 MPN 리스트"가 됨
   let codes = [];
   if (!code) {
     const skuFromTable = pickSkuListFromTables(extracted);
     const docText = extracted?.text || previewText || '';
     codes = skuFromTable.length ? skuFromTable : expandFromCodeSystem(extracted, blueprint, docText);
     const maxEnv = Number(process.env.FIRST_PASS_CODES || FIRST_PASS_CODES || 20);
     const maxCodes = Number.isFinite(maxEnv) && maxEnv > 0 ? maxEnv : 20;
     if (codes.length > maxCodes) codes = codes.slice(0, maxCodes);
   }
 
   // 🔹 후보(candidates)가 아직 비었고, 방금 수집한 codes가 있으면 candidates로 승격
   if (!candidates.length && codes.length) {
     const merged = [];
     const seen = new Set();
     for (const raw of codes) {
       const trimmed = typeof raw === 'string' ? raw.trim() : String(raw || '');
       if (!trimmed) continue;
       const norm = normalizeCode(trimmed);
       if (seen.has(norm)) continue;