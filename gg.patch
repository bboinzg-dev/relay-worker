diff --git a/db.js b/db.js
index 0d4bbff34fa61cfff8011c4e5d91d54efe506ca7..98ad8a6002d8bda6b3abff4adb442310b09e6b73 100644
--- a/db.js
+++ b/db.js
@@ -1,33 +1,58 @@
 // db.js — 워커 공용 PG 커넥터(싱글턴, 안전 TLS 지원)
 'use strict';
 
 const { Pool } = require('pg');
 const fs = require('fs');
 const { URL } = require('url');
 
 let _pool;
+let _poolInitError = null;
+
+function createUnavailablePool(error) {
+  const makeError = () => {
+    const err = new Error('DB_UNAVAILABLE');
+    if (error) {
+      err.cause = error;
+      err.message = error?.message
+        ? `DB_UNAVAILABLE: ${error.message}`
+        : 'DB_UNAVAILABLE';
+    }
+    return err;
+  };
+
+  const reject = async () => {
+    throw makeError();
+  };
+
+  return {
+    query: reject,
+    connect: reject,
+    end: async () => {},
+    on: () => {},
+  };
+}
 
 function attachVerboseQueryLogging(pool) {
   if (process.env.VERBOSE_TRACE !== '1') return pool;
 
   const origQuery = pool.query.bind(pool);
   pool.query = async (text, params) => {
     try {
       const caller = new Error().stack.split('\n')[2]?.trim();
       const head = String(text).split('\n')[0].slice(0, 140);
       console.log(`[SQL] ${head} :: caller=${caller}`);
     } catch (_) {
       // best-effort logging only
     }
     return origQuery(text, params);
   };
   return pool;
 }
 
 /** 우선순위로 연결 문자열 선택 */
 function resolveConnectionString() {
   const c =
     process.env.POSTGRES_URL ||
     process.env.DATABASE_URL ||
     process.env.APP_DB_URL ||
     process.env.PG_CONNECTION_STRING;
@@ -118,51 +143,57 @@ function buildPool() {
     console.log('[db] pool created', {
       host: u.hostname,
       port: u.port || 5432,
       db: u.pathname.replace(/^\//, ''),
       ssl:
         ssl === false
           ? 'off'
           : ssl?.rejectUnauthorized === false
           ? 'tls-insecure'
           : 'tls-verify',
       max,
     });
   } catch {
     console.log('[db] pool created (sanitized)');
   }
 
   pool.on('error', (err) => {
     console.error('[db] unexpected error on idle client', err);
   });
 
   return attachVerboseQueryLogging(pool);
 }
 
 function getPool() {
   if (_pool) return _pool;
-  _pool = buildPool();
+  try {
+    _pool = buildPool();
+  } catch (err) {
+    _poolInitError = err;
+    console.error('[db] buildPool failed:', err?.message || err);
+    _pool = createUnavailablePool(err);
+  }
   return _pool;
 }
 
 /** 단건 쿼리 */
 async function query(text, params) {
   return getPool().query(text, params);
 }
 
 /** 클라이언트 단위로 작업 */
 async function withClient(fn) {
   const client = await getPool().connect();
   try {
     return await fn(client);
   } finally {
     client.release();
   }
 }
 
 /** 트랜잭션 유틸 */
 async function withTransaction(fn) {
   return withClient(async (client) => {
     await client.query('BEGIN');
     try {
       const res = await fn(client);
       await client.query('COMMIT');
