diff --git a/server.retail.js b/server.retail.js
index 2c794838fc5e93c0fe04138585d6960bd6dd6b3a..f65588dc433011726f3049cf16937f4f03c9d203 100644
--- a/server.retail.js
+++ b/server.retail.js
@@ -50,47 +50,50 @@ router.post('/api/retail/export-catalog', async (req, res) => {
     await new Promise((resolve, reject) => {
       pgStream
         .pipe(toNdjson)
         .pipe(gcsWrite)
         .on('finish', resolve)
         .on('error', reject);
     });
 
     const [meta] = await gcsFile.getMetadata();
     res.json({ ok: true, gcsUri: GCS_URI, count, size: meta.size });
   } catch (e) {
     console.error('[retail/export] error', e);
     res.status(500).json({ ok: false, error: e.message });
   } finally {
     client.release();
   }
 });
 
 /** Start Import (returns operation name) */
 router.post('/api/retail/import-catalog', async (req, res) => {
   try {
     const [op] = await retail.importProducts({
       parent: BRANCH,
       inputConfig: { gcsSource: { inputUris: [GCS_URI] } },
       reconciliationMode: 'INCREMENTAL',
+      errorsConfig: {
+        gcsPrefix: `gs://${BUCKET}/${process.env.RETAIL_ERRORS_PREFIX || 'retail/errors'}`,
+      },
     });
     res.json({ ok: true, operation: op.name, gcsUri: GCS_URI, branch: BRANCH });
   } catch (e) {
     console.error('[retail/import] error', e);
     res.status(500).json({ ok: false, error: e.message });
   }
 });
 
 /** Check Import Status (use ?name=operations/â€¦ ) */
 router.get('/api/retail/import-catalog/status', async (req, res) => {
   try {
     const name = req.query.name;
     if (!name) return res.status(400).json({ ok: false, error: 'missing ?name' });
     const [resp] = await retail.checkImportProductsProgress(String(name));
     res.json({ ok: true, metadata: resp.metadata, done: resp.done, result: resp.result });
   } catch (e) {
     console.error('[retail/status] error', e);
     res.status(500).json({ ok: false, error: e.message });
   }
 });
 
-module.exports = router;
\ No newline at end of file
+module.exports = router;