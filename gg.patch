diff --git a/server.js b/server.js
index 1424760e164f2eb0a95bc5793af720f25802fb77..c2f68ecc9024b12aac143e65a14aaf2888ca6c5d 100644
--- a/server.js
+++ b/server.js
@@ -140,50 +140,76 @@ const app = express();
 
 // ✅ 항상 찍히는 부팅 로그 + 간단 헬스/정보
 console.log('[BOOT] server.js starting', {
   file: __filename,
   node: process.version,
   ROUTE_DEBUG: process.env.ROUTE_DEBUG || null,
   revision: process.env.K_REVISION || null,
 });
 
 // 가장 가벼운 핑
 app.get('/_ping', (_req, res) => res.json({ ok: true, rev: process.env.K_REVISION || null }));
 
 // 현재 실행 중인 엔트리/디렉토리 확인 (정말 server.js가 실행되는지 확인)
 app.get('/_whoami', (_req, res) => {
   try {
     res.json({
       main: require.main && require.main.filename,
       dir: __dirname,
       ROUTE_DEBUG: process.env.ROUTE_DEBUG || null
     });
   } catch (e) {
     res.status(500).json({ ok: false, error: String(e?.message || e) });
   }
 });
 
+app.post(['/api/worker/ingest', '/worker/ingest'], async (req, res) => {
+  try {
+    const body = req.body || {};
+    const payload = body.payload || body;
+
+    const gcsUri = payload.gcsUri || payload.gcs_uri;
+    if (!gcsUri) return res.status(400).json({ ok:false, error:'gcsUri required' });
+
+    const { runAutoIngest } = getIngest();
+    const result = await runAutoIngest({
+      gcsUri,
+      family_slug: payload.family_slug || payload.family_hint || null,
+      brand: payload.brand || null,
+      code: payload.code || null,
+      series: payload.series || null,
+      display_name: payload.display_name || null,
+      overrides: { brand: payload.brand || null, series: payload.series || null }
+    });
+
+    return res.status(200).json({ ok: true, result });
+  } catch (e) {
+    console.error(e);
+    return res.status(400).json({ ok:false, error:String(e?.message || e) });
+  }
+});
+
 
 app.use(bodyParser.json({ limit: '25mb' }));
 app.use(bodyParser.urlencoded({ extended: true }));
 app.disable('x-powered-by');
 
 /* ---------------- Env / Config ---------------- */
 const PORT = process.env.PORT || 8080;
 const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';
 
 function parseCorsOrigins(envStr) {
   if (!envStr) return null;
   const items = envStr.split(',').map(s => s.trim()).filter(Boolean);
   return items.map(p => {
     if (p.startsWith('/') && p.endsWith('/')) {
       const body = p.slice(1, -1);
       return new RegExp(body);
     }
     return p;
   });
 }
 const CORS_ALLOW = parseCorsOrigins(process.env.CORS_ALLOW_ORIGINS);
 
 /* ---------------- CORS / Security ---------------- */
 if (CORS_ALLOW) {
   app.use(cors({ origin: CORS_ALLOW, credentials: true }));
